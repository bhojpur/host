version: "3"

vars:
  GREETING: Hello, Bhojpur Host Developer!

tasks:
    default:
        cmds:
        - echo "{{.GREETING}}"
        silent: true

    kube-apis:
        desc: Generate Go source code from Kubernetes APIs
        cmds:
        - GOFLAGS=-mod=mod go generate ./...

    build-tools:
        desc: Build the software tools for build, release of Bhojpur Host applications
        cmds:
        - GOFLAGS=-mod=mod go build -ldflags "-X google.golang.org/protobuf/reflect/protoregistry.conflictPolicy=warn" -o bin/hostutl cmd/machine/main.go 
        - chmod 755 bin/hostutl
        - cp bin/hostutl $GOPATH/bin
        - GOFLAGS=-mod=mod go build -ldflags "-X google.golang.org/protobuf/reflect/protoregistry.conflictPolicy=warn" -o bin/hostfarm cmd/cluster/main.go 
        - chmod 755 bin/hostfarm
        - cp bin/hostfarm $GOPATH/bin
        - GOFLAGS=-mod=mod go build -ldflags "-X google.golang.org/protobuf/reflect/protoregistry.conflictPolicy=warn" -o bin/hostops cmd/operation/main.go 
        - chmod 755 bin/hostops
        - cp bin/hostops $GOPATH/bin

    build-cloud:
        desc: Build the Cloud-aware hosting applications using Go
        cmds:
        - GOFLAGS=-mod=mod go build -o bin/hostctl client.go 
        - GOFLAGS=-mod=mod go build -o bin/hosting server.go

    build-darwin:
        desc: Build the desktop application for current OS
        cmds:
        - guiutl package -name "Bhojpur Host" -os darwin -sourceDir internal -icon internal/Icon.png
        - cp -R "Bhojpur Host.app" ~/Applications

    build-linux:
        desc: Build the desktop application for current OS
        cmds:
        - guiutl package -name "Bhojpur Host" -os linux -sourceDir internal -icon internal/Icon.png

    build-windows:
        desc: Build the desktop application for current OS
        cmds:
        - guiutl package -name "Bhojpur Host" -os windows -sourceDir internal -icon internal/Icon.png

    package-android:
        desc: Package the mobile application for Android
        cmds:
        - guiutl package -name "Bhojpur Host" -os android -appID net.bhojpur.host -icon internal/Icon.png

    package-ios:
        desc: Package the mobile application for iOS
        cmds:
        - guiutl package -name "Bhojpur Host" -os ios -appID net.bhojpur.host -icon internal/Icon.png

    release-macos:
        desc: Release the native application for macOS App Store
        cmds:
        - guiutl release -appID net.bhojpur.host -appVersion 1.0 -appBuild 1 -category business

    release-android:
        desc: Release the mobile application for Google Play
        cmds:
        - guiutl release -os android -appID net.bhojpur.host -appVersion 1.0 -appBuild 1

    release-ios:
        desc: Release the mobile application for iOS App Store
        cmds:
        - guiutl release -os ios -appID net.bhojpur.host -appVersion 1.0 -appBuild 1

    run-web-server:
        desc: Run the web server application from source code
        cmds:
        - GOFLAGS=-mod=mod go run server.go
 
    run-web-client:
        desc: Run the web client application from source code
        cmds:
        - GOFLAGS=-mod=mod go run client.go

    run-mobile:
        desc: Run the mobile client application on emulator
        cmds:
        - GOFLAGS=-mod=mod go run -tags mobile native/main.go

    run-desktop: 
        desc: Run the desktop application on local host
        cmds:
        - GOFLAGS=-mod=mod go run native/main.go

    generate:
        desc: Generate Go source code from Protocol Buffers
        cmds:
        - protoc --go_out=./pkg/cluster --go-grpc_out=./pkg/cluster --go_opt=module=github.com/bhojpur/host/pkg/cluster --go-grpc_opt=require_unimplemented_servers=false,module=github.com/bhojpur/host/pkg/cluster pkg/cluster/types/drivers.proto

    test:
        desc: Execute all the Unit Tests
        cmds:
        - gotestsum --junitfile test-results/unit-tests.xml -- -short -race -cover -coverprofile test-results/cover.out ./...

    swagger.gen:
        desc: Generate Go source code from the OpenAPI specifications
        cmds:
        - /usr/bin/swagger generate server -f ./pkg/swagger/swagger.yml --copyright-file=./pkg/swagger/boilerplate.go.txt --server-package=pkg/machine/server --model-package=pkg/machine/models --main-package=machine/server
        - /usr/bin/swagger generate client -f ./pkg/swagger/swagger.yml --copyright-file=./pkg/swagger/boilerplate.go.txt --client-package=pkg/api/machine --model-package=pkg/machine/models --skip-models

    swagger.validate:
        desc: Validate all the Swagger API specifications
        cmds:
        - /usr/bin/swagger validate ./pkg/swagger/swagger.yml

    swagger.doc:
        desc: Generate documentation for Swagger specified APIs
        cmds:
        - docker run -i yousan/swagger-yaml-to-html < pkg/swagger/swagger.yml > doc/index.html