// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by main. DO NOT EDIT.

// +k8s:deepcopy-gen=package
// +groupName=bke.bhojpur.net
package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// BKEBootstrapList is a list of BKEBootstrap resources
type BKEBootstrapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []BKEBootstrap `json:"items"`
}

func NewBKEBootstrap(namespace, name string, obj BKEBootstrap) *BKEBootstrap {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("BKEBootstrap").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// BKEBootstrapTemplateList is a list of BKEBootstrapTemplate resources
type BKEBootstrapTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []BKEBootstrapTemplate `json:"items"`
}

func NewBKEBootstrapTemplate(namespace, name string, obj BKEBootstrapTemplate) *BKEBootstrapTemplate {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("BKEBootstrapTemplate").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// BKEClusterList is a list of BKECluster resources
type BKEClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []BKECluster `json:"items"`
}

func NewBKECluster(namespace, name string, obj BKECluster) *BKECluster {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("BKECluster").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// BKEControlPlaneList is a list of BKEControlPlane resources
type BKEControlPlaneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []BKEControlPlane `json:"items"`
}

func NewBKEControlPlane(namespace, name string, obj BKEControlPlane) *BKEControlPlane {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("BKEControlPlane").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// CustomMachineList is a list of CustomMachine resources
type CustomMachineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []CustomMachine `json:"items"`
}

func NewCustomMachine(namespace, name string, obj CustomMachine) *CustomMachine {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("CustomMachine").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ETCDSnapshotList is a list of ETCDSnapshot resources
type ETCDSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []ETCDSnapshot `json:"items"`
}

func NewETCDSnapshot(namespace, name string, obj ETCDSnapshot) *ETCDSnapshot {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("ETCDSnapshot").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}
