// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DriverClient is the client API for Driver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ClusterInfo, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*ClusterInfo, error)
	PostCheck(ctx context.Context, in *ClusterInfo, opts ...grpc.CallOption) (*ClusterInfo, error)
	Remove(ctx context.Context, in *ClusterInfo, opts ...grpc.CallOption) (*Empty, error)
	GetDriverCreateOptions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DriverFlags, error)
	GetDriverUpdateOptions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DriverFlags, error)
	GetVersion(ctx context.Context, in *ClusterInfo, opts ...grpc.CallOption) (*KubernetesVersion, error)
	SetVersion(ctx context.Context, in *SetVersionRequest, opts ...grpc.CallOption) (*Empty, error)
	GetNodeCount(ctx context.Context, in *ClusterInfo, opts ...grpc.CallOption) (*NodeCount, error)
	SetNodeCount(ctx context.Context, in *SetNodeCountRequest, opts ...grpc.CallOption) (*Empty, error)
	GetCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Capabilities, error)
	ETCDSave(ctx context.Context, in *SaveETCDSnapshotRequest, opts ...grpc.CallOption) (*Empty, error)
	ETCDRestore(ctx context.Context, in *RestoreETCDSnapshotRequest, opts ...grpc.CallOption) (*ClusterInfo, error)
	ETCDRemoveSnapshot(ctx context.Context, in *RemoveETCDSnapshotRequest, opts ...grpc.CallOption) (*Empty, error)
	GetK8SCapabilities(ctx context.Context, in *DriverOptions, opts ...grpc.CallOption) (*K8SCapabilities, error)
	RemoveLegacyServiceAccount(ctx context.Context, in *ClusterInfo, opts ...grpc.CallOption) (*Empty, error)
}

type driverClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverClient(cc grpc.ClientConnInterface) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ClusterInfo, error) {
	out := new(ClusterInfo)
	err := c.cc.Invoke(ctx, "/types.Driver/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*ClusterInfo, error) {
	out := new(ClusterInfo)
	err := c.cc.Invoke(ctx, "/types.Driver/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) PostCheck(ctx context.Context, in *ClusterInfo, opts ...grpc.CallOption) (*ClusterInfo, error) {
	out := new(ClusterInfo)
	err := c.cc.Invoke(ctx, "/types.Driver/PostCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Remove(ctx context.Context, in *ClusterInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/types.Driver/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetDriverCreateOptions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DriverFlags, error) {
	out := new(DriverFlags)
	err := c.cc.Invoke(ctx, "/types.Driver/GetDriverCreateOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetDriverUpdateOptions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DriverFlags, error) {
	out := new(DriverFlags)
	err := c.cc.Invoke(ctx, "/types.Driver/GetDriverUpdateOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetVersion(ctx context.Context, in *ClusterInfo, opts ...grpc.CallOption) (*KubernetesVersion, error) {
	out := new(KubernetesVersion)
	err := c.cc.Invoke(ctx, "/types.Driver/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) SetVersion(ctx context.Context, in *SetVersionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/types.Driver/SetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetNodeCount(ctx context.Context, in *ClusterInfo, opts ...grpc.CallOption) (*NodeCount, error) {
	out := new(NodeCount)
	err := c.cc.Invoke(ctx, "/types.Driver/GetNodeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) SetNodeCount(ctx context.Context, in *SetNodeCountRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/types.Driver/SetNodeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Capabilities, error) {
	out := new(Capabilities)
	err := c.cc.Invoke(ctx, "/types.Driver/GetCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) ETCDSave(ctx context.Context, in *SaveETCDSnapshotRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/types.Driver/ETCDSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) ETCDRestore(ctx context.Context, in *RestoreETCDSnapshotRequest, opts ...grpc.CallOption) (*ClusterInfo, error) {
	out := new(ClusterInfo)
	err := c.cc.Invoke(ctx, "/types.Driver/ETCDRestore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) ETCDRemoveSnapshot(ctx context.Context, in *RemoveETCDSnapshotRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/types.Driver/ETCDRemoveSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetK8SCapabilities(ctx context.Context, in *DriverOptions, opts ...grpc.CallOption) (*K8SCapabilities, error) {
	out := new(K8SCapabilities)
	err := c.cc.Invoke(ctx, "/types.Driver/GetK8sCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) RemoveLegacyServiceAccount(ctx context.Context, in *ClusterInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/types.Driver/RemoveLegacyServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverServer is the server API for Driver service.
// All implementations should embed UnimplementedDriverServer
// for forward compatibility
type DriverServer interface {
	Create(context.Context, *CreateRequest) (*ClusterInfo, error)
	Update(context.Context, *UpdateRequest) (*ClusterInfo, error)
	PostCheck(context.Context, *ClusterInfo) (*ClusterInfo, error)
	Remove(context.Context, *ClusterInfo) (*Empty, error)
	GetDriverCreateOptions(context.Context, *Empty) (*DriverFlags, error)
	GetDriverUpdateOptions(context.Context, *Empty) (*DriverFlags, error)
	GetVersion(context.Context, *ClusterInfo) (*KubernetesVersion, error)
	SetVersion(context.Context, *SetVersionRequest) (*Empty, error)
	GetNodeCount(context.Context, *ClusterInfo) (*NodeCount, error)
	SetNodeCount(context.Context, *SetNodeCountRequest) (*Empty, error)
	GetCapabilities(context.Context, *Empty) (*Capabilities, error)
	ETCDSave(context.Context, *SaveETCDSnapshotRequest) (*Empty, error)
	ETCDRestore(context.Context, *RestoreETCDSnapshotRequest) (*ClusterInfo, error)
	ETCDRemoveSnapshot(context.Context, *RemoveETCDSnapshotRequest) (*Empty, error)
	GetK8SCapabilities(context.Context, *DriverOptions) (*K8SCapabilities, error)
	RemoveLegacyServiceAccount(context.Context, *ClusterInfo) (*Empty, error)
}

// UnimplementedDriverServer should be embedded to have forward compatible implementations.
type UnimplementedDriverServer struct {
}

func (UnimplementedDriverServer) Create(context.Context, *CreateRequest) (*ClusterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDriverServer) Update(context.Context, *UpdateRequest) (*ClusterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDriverServer) PostCheck(context.Context, *ClusterInfo) (*ClusterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCheck not implemented")
}
func (UnimplementedDriverServer) Remove(context.Context, *ClusterInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedDriverServer) GetDriverCreateOptions(context.Context, *Empty) (*DriverFlags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriverCreateOptions not implemented")
}
func (UnimplementedDriverServer) GetDriverUpdateOptions(context.Context, *Empty) (*DriverFlags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriverUpdateOptions not implemented")
}
func (UnimplementedDriverServer) GetVersion(context.Context, *ClusterInfo) (*KubernetesVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedDriverServer) SetVersion(context.Context, *SetVersionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVersion not implemented")
}
func (UnimplementedDriverServer) GetNodeCount(context.Context, *ClusterInfo) (*NodeCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeCount not implemented")
}
func (UnimplementedDriverServer) SetNodeCount(context.Context, *SetNodeCountRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNodeCount not implemented")
}
func (UnimplementedDriverServer) GetCapabilities(context.Context, *Empty) (*Capabilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapabilities not implemented")
}
func (UnimplementedDriverServer) ETCDSave(context.Context, *SaveETCDSnapshotRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ETCDSave not implemented")
}
func (UnimplementedDriverServer) ETCDRestore(context.Context, *RestoreETCDSnapshotRequest) (*ClusterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ETCDRestore not implemented")
}
func (UnimplementedDriverServer) ETCDRemoveSnapshot(context.Context, *RemoveETCDSnapshotRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ETCDRemoveSnapshot not implemented")
}
func (UnimplementedDriverServer) GetK8SCapabilities(context.Context, *DriverOptions) (*K8SCapabilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SCapabilities not implemented")
}
func (UnimplementedDriverServer) RemoveLegacyServiceAccount(context.Context, *ClusterInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLegacyServiceAccount not implemented")
}

// UnsafeDriverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverServer will
// result in compilation errors.
type UnsafeDriverServer interface {
	mustEmbedUnimplementedDriverServer()
}

func RegisterDriverServer(s grpc.ServiceRegistrar, srv DriverServer) {
	s.RegisterService(&Driver_ServiceDesc, srv)
}

func _Driver_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_PostCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).PostCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/PostCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).PostCheck(ctx, req.(*ClusterInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Remove(ctx, req.(*ClusterInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetDriverCreateOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetDriverCreateOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/GetDriverCreateOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetDriverCreateOptions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetDriverUpdateOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetDriverUpdateOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/GetDriverUpdateOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetDriverUpdateOptions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetVersion(ctx, req.(*ClusterInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_SetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).SetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/SetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).SetVersion(ctx, req.(*SetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetNodeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetNodeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/GetNodeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetNodeCount(ctx, req.(*ClusterInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_SetNodeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNodeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).SetNodeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/SetNodeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).SetNodeCount(ctx, req.(*SetNodeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/GetCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetCapabilities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_ETCDSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveETCDSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).ETCDSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/ETCDSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).ETCDSave(ctx, req.(*SaveETCDSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_ETCDRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreETCDSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).ETCDRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/ETCDRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).ETCDRestore(ctx, req.(*RestoreETCDSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_ETCDRemoveSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveETCDSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).ETCDRemoveSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/ETCDRemoveSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).ETCDRemoveSnapshot(ctx, req.(*RemoveETCDSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetK8SCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetK8SCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/GetK8sCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetK8SCapabilities(ctx, req.(*DriverOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_RemoveLegacyServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).RemoveLegacyServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Driver/RemoveLegacyServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).RemoveLegacyServiceAccount(ctx, req.(*ClusterInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Driver_ServiceDesc is the grpc.ServiceDesc for Driver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Driver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "types.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Driver_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Driver_Update_Handler,
		},
		{
			MethodName: "PostCheck",
			Handler:    _Driver_PostCheck_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Driver_Remove_Handler,
		},
		{
			MethodName: "GetDriverCreateOptions",
			Handler:    _Driver_GetDriverCreateOptions_Handler,
		},
		{
			MethodName: "GetDriverUpdateOptions",
			Handler:    _Driver_GetDriverUpdateOptions_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _Driver_GetVersion_Handler,
		},
		{
			MethodName: "SetVersion",
			Handler:    _Driver_SetVersion_Handler,
		},
		{
			MethodName: "GetNodeCount",
			Handler:    _Driver_GetNodeCount_Handler,
		},
		{
			MethodName: "SetNodeCount",
			Handler:    _Driver_SetNodeCount_Handler,
		},
		{
			MethodName: "GetCapabilities",
			Handler:    _Driver_GetCapabilities_Handler,
		},
		{
			MethodName: "ETCDSave",
			Handler:    _Driver_ETCDSave_Handler,
		},
		{
			MethodName: "ETCDRestore",
			Handler:    _Driver_ETCDRestore_Handler,
		},
		{
			MethodName: "ETCDRemoveSnapshot",
			Handler:    _Driver_ETCDRemoveSnapshot_Handler,
		},
		{
			MethodName: "GetK8sCapabilities",
			Handler:    _Driver_GetK8SCapabilities_Handler,
		},
		{
			MethodName: "RemoveLegacyServiceAccount",
			Handler:    _Driver_RemoveLegacyServiceAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/cluster/types/drivers.proto",
}
