package resource

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import (
	"sync"

	"k8s.io/apimachinery/pkg/runtime/schema"
)

//bhojpurTypes is a set of all types generated by the Bhojpur Host framework
//clusterScopedTypes is a set of all types that have been added by a clusterScoped handler
var (
	bhojpurTypes = struct {
		sync.RWMutex
		m map[schema.GroupVersionResource]bool
	}{m: make(map[schema.GroupVersionResource]bool)}

	clusterScopedTypes = struct {
		sync.RWMutex
		m map[schema.GroupVersionResource]bool
	}{m: make(map[schema.GroupVersionResource]bool)}
)

//Get returns a copy of the set of bhojpurTypes
func Get() map[schema.GroupVersionResource]bool {
	bhojpurTypes.RLock()
	defer bhojpurTypes.RUnlock()
	targetMap := make(map[schema.GroupVersionResource]bool, len(bhojpurTypes.m))
	for key, value := range bhojpurTypes.m {
		targetMap[key] = value
	}
	return targetMap
}

func GetClusterScopedTypes() map[schema.GroupVersionResource]bool {
	clusterScopedTypes.Lock()
	defer clusterScopedTypes.Unlock()
	targetMap := make(map[schema.GroupVersionResource]bool, len(clusterScopedTypes.m))
	for key, value := range clusterScopedTypes.m {
		targetMap[key] = value
	}
	return targetMap
}

//Put adds an object to the set and panic on collision
func Put(key schema.GroupVersionResource) {
	bhojpurTypes.Lock()
	defer bhojpurTypes.Unlock()
	_, exists := bhojpurTypes.m[key]
	if exists {
		//only used in an init function
		panic("key exists in bhojpurTypes")
	}
	bhojpurTypes.m[key] = true
}

//PutClusterScoped adds a object that contains a cluster scoped handler to the set
func PutClusterScoped(key schema.GroupVersionResource) {
	clusterScopedTypes.Lock()
	defer clusterScopedTypes.Unlock()
	clusterScopedTypes.m[key] = true
}
