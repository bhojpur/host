// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/bhojpur/host/pkg/machine/models"
)

// SystemPingReader is a Reader for the SystemPing structure.
type SystemPingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SystemPingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSystemPingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewSystemPingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSystemPingOK creates a SystemPingOK with default headers values
func NewSystemPingOK() *SystemPingOK {
	var (
		// initialize headers with default values
		cacheControlDefault = string("no-cache, no-store, must-revalidate")

		pragmaDefault = string("no-cache")

		swarmDefault = string("inactive")
	)

	return &SystemPingOK{

		CacheControl: cacheControlDefault,
		Pragma:       pragmaDefault,
		Swarm:        swarmDefault,
	}
}

/* SystemPingOK describes a response with status code 200, with default header values.

no error
*/
type SystemPingOK struct {

	/* Max API Version the server supports
	 */
	APIVersion string

	/* If the server is running with experimental mode enabled
	 */
	BhojpurExperimental bool

	/* Default version of Bhojpur Host image builder
	 */
	BuilderVersion string
	CacheControl   string
	Pragma         string

	/* Contains information about Swarm status of the daemon,
	and if the daemon is acting as a manager or worker node.


	     Default: "inactive"
	*/
	Swarm string

	Payload string
}

func (o *SystemPingOK) Error() string {
	return fmt.Sprintf("[GET /_ping][%d] systemPingOK  %+v", 200, o.Payload)
}
func (o *SystemPingOK) GetPayload() string {
	return o.Payload
}

func (o *SystemPingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header API-Version
	hdrAPIVersion := response.GetHeader("API-Version")

	if hdrAPIVersion != "" {
		o.APIVersion = hdrAPIVersion
	}

	// hydrates response header Bhojpur-Experimental
	hdrBhojpurExperimental := response.GetHeader("Bhojpur-Experimental")

	if hdrBhojpurExperimental != "" {
		valbhojpurExperimental, err := swag.ConvertBool(hdrBhojpurExperimental)
		if err != nil {
			return errors.InvalidType("Bhojpur-Experimental", "header", "bool", hdrBhojpurExperimental)
		}
		o.BhojpurExperimental = valbhojpurExperimental
	}

	// hydrates response header Builder-Version
	hdrBuilderVersion := response.GetHeader("Builder-Version")

	if hdrBuilderVersion != "" {
		o.BuilderVersion = hdrBuilderVersion
	}

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header Pragma
	hdrPragma := response.GetHeader("Pragma")

	if hdrPragma != "" {
		o.Pragma = hdrPragma
	}

	// hydrates response header Swarm
	hdrSwarm := response.GetHeader("Swarm")

	if hdrSwarm != "" {
		o.Swarm = hdrSwarm
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSystemPingInternalServerError creates a SystemPingInternalServerError with default headers values
func NewSystemPingInternalServerError() *SystemPingInternalServerError {
	var (
		// initialize headers with default values
		cacheControlDefault = string("no-cache, no-store, must-revalidate")

		pragmaDefault = string("no-cache")
	)

	return &SystemPingInternalServerError{

		CacheControl: cacheControlDefault,
		Pragma:       pragmaDefault,
	}
}

/* SystemPingInternalServerError describes a response with status code 500, with default header values.

server error
*/
type SystemPingInternalServerError struct {
	CacheControl string
	Pragma       string

	Payload *models.ErrorResponse
}

func (o *SystemPingInternalServerError) Error() string {
	return fmt.Sprintf("[GET /_ping][%d] systemPingInternalServerError  %+v", 500, o.Payload)
}
func (o *SystemPingInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SystemPingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Cache-Control
	hdrCacheControl := response.GetHeader("Cache-Control")

	if hdrCacheControl != "" {
		o.CacheControl = hdrCacheControl
	}

	// hydrates response header Pragma
	hdrPragma := response.GetHeader("Pragma")

	if hdrPragma != "" {
		o.Pragma = hdrPragma
	}

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
