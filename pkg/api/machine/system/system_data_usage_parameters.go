// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSystemDataUsageParams creates a new SystemDataUsageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSystemDataUsageParams() *SystemDataUsageParams {
	return &SystemDataUsageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSystemDataUsageParamsWithTimeout creates a new SystemDataUsageParams object
// with the ability to set a timeout on a request.
func NewSystemDataUsageParamsWithTimeout(timeout time.Duration) *SystemDataUsageParams {
	return &SystemDataUsageParams{
		timeout: timeout,
	}
}

// NewSystemDataUsageParamsWithContext creates a new SystemDataUsageParams object
// with the ability to set a context for a request.
func NewSystemDataUsageParamsWithContext(ctx context.Context) *SystemDataUsageParams {
	return &SystemDataUsageParams{
		Context: ctx,
	}
}

// NewSystemDataUsageParamsWithHTTPClient creates a new SystemDataUsageParams object
// with the ability to set a custom HTTPClient for a request.
func NewSystemDataUsageParamsWithHTTPClient(client *http.Client) *SystemDataUsageParams {
	return &SystemDataUsageParams{
		HTTPClient: client,
	}
}

/* SystemDataUsageParams contains all the parameters to send to the API endpoint
   for the system data usage operation.

   Typically these are written to a http.Request.
*/
type SystemDataUsageParams struct {

	/* Type.

	   Object types, for which to compute and return data.

	*/
	Type []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the system data usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SystemDataUsageParams) WithDefaults() *SystemDataUsageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the system data usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SystemDataUsageParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the system data usage params
func (o *SystemDataUsageParams) WithTimeout(timeout time.Duration) *SystemDataUsageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the system data usage params
func (o *SystemDataUsageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the system data usage params
func (o *SystemDataUsageParams) WithContext(ctx context.Context) *SystemDataUsageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the system data usage params
func (o *SystemDataUsageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the system data usage params
func (o *SystemDataUsageParams) WithHTTPClient(client *http.Client) *SystemDataUsageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the system data usage params
func (o *SystemDataUsageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithType adds the typeVar to the system data usage params
func (o *SystemDataUsageParams) WithType(typeVar []string) *SystemDataUsageParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the system data usage params
func (o *SystemDataUsageParams) SetType(typeVar []string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *SystemDataUsageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Type != nil {

		// binding items for type
		joinedType := o.bindParamType(reg)

		// query array param type
		if err := r.SetQueryParam("type", joinedType...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSystemDataUsage binds the parameter type
func (o *SystemDataUsageParams) bindParamType(formats strfmt.Registry) []string {
	typeIR := o.Type

	var typeIC []string
	for _, typeIIR := range typeIR { // explode []string

		typeIIV := typeIIR // string as string
		typeIC = append(typeIC, typeIIV)
	}

	// items.CollectionFormat: "multi"
	typeIS := swag.JoinByFormat(typeIC, "multi")

	return typeIS
}
