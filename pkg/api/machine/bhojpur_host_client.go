// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package machine

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/bhojpur/host/pkg/api/machine/config"
	"github.com/bhojpur/host/pkg/api/machine/container"
	"github.com/bhojpur/host/pkg/api/machine/distribution"
	"github.com/bhojpur/host/pkg/api/machine/exec"
	"github.com/bhojpur/host/pkg/api/machine/image"
	"github.com/bhojpur/host/pkg/api/machine/network"
	"github.com/bhojpur/host/pkg/api/machine/node"
	"github.com/bhojpur/host/pkg/api/machine/plugin"
	"github.com/bhojpur/host/pkg/api/machine/secret"
	"github.com/bhojpur/host/pkg/api/machine/service"
	"github.com/bhojpur/host/pkg/api/machine/session"
	"github.com/bhojpur/host/pkg/api/machine/swarm"
	"github.com/bhojpur/host/pkg/api/machine/system"
	"github.com/bhojpur/host/pkg/api/machine/task"
	"github.com/bhojpur/host/pkg/api/machine/volume"
)

// Default bhojpur host HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/v1.42"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http", "https"}

// NewHTTPClient creates a new bhojpur host HTTP client.
func NewHTTPClient(formats strfmt.Registry) *BhojpurHost {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new bhojpur host HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *BhojpurHost {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new bhojpur host client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *BhojpurHost {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(BhojpurHost)
	cli.Transport = transport
	cli.Config = config.New(transport, formats)
	cli.Container = container.New(transport, formats)
	cli.Distribution = distribution.New(transport, formats)
	cli.Exec = exec.New(transport, formats)
	cli.Image = image.New(transport, formats)
	cli.Network = network.New(transport, formats)
	cli.Node = node.New(transport, formats)
	cli.Plugin = plugin.New(transport, formats)
	cli.Secret = secret.New(transport, formats)
	cli.Service = service.New(transport, formats)
	cli.Session = session.New(transport, formats)
	cli.Swarm = swarm.New(transport, formats)
	cli.System = system.New(transport, formats)
	cli.Task = task.New(transport, formats)
	cli.Volume = volume.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// BhojpurHost is a client for bhojpur host
type BhojpurHost struct {
	Config config.ClientService

	Container container.ClientService

	Distribution distribution.ClientService

	Exec exec.ClientService

	Image image.ClientService

	Network network.ClientService

	Node node.ClientService

	Plugin plugin.ClientService

	Secret secret.ClientService

	Service service.ClientService

	Session session.ClientService

	Swarm swarm.ClientService

	System system.ClientService

	Task task.ClientService

	Volume volume.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *BhojpurHost) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Config.SetTransport(transport)
	c.Container.SetTransport(transport)
	c.Distribution.SetTransport(transport)
	c.Exec.SetTransport(transport)
	c.Image.SetTransport(transport)
	c.Network.SetTransport(transport)
	c.Node.SetTransport(transport)
	c.Plugin.SetTransport(transport)
	c.Secret.SetTransport(transport)
	c.Service.SetTransport(transport)
	c.Session.SetTransport(transport)
	c.Swarm.SetTransport(transport)
	c.System.SetTransport(transport)
	c.Task.SetTransport(transport)
	c.Volume.SetTransport(transport)
}
