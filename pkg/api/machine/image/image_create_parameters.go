// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewImageCreateParams creates a new ImageCreateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewImageCreateParams() *ImageCreateParams {
	return &ImageCreateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewImageCreateParamsWithTimeout creates a new ImageCreateParams object
// with the ability to set a timeout on a request.
func NewImageCreateParamsWithTimeout(timeout time.Duration) *ImageCreateParams {
	return &ImageCreateParams{
		timeout: timeout,
	}
}

// NewImageCreateParamsWithContext creates a new ImageCreateParams object
// with the ability to set a context for a request.
func NewImageCreateParamsWithContext(ctx context.Context) *ImageCreateParams {
	return &ImageCreateParams{
		Context: ctx,
	}
}

// NewImageCreateParamsWithHTTPClient creates a new ImageCreateParams object
// with the ability to set a custom HTTPClient for a request.
func NewImageCreateParamsWithHTTPClient(client *http.Client) *ImageCreateParams {
	return &ImageCreateParams{
		HTTPClient: client,
	}
}

/* ImageCreateParams contains all the parameters to send to the API endpoint
   for the image create operation.

   Typically these are written to a http.Request.
*/
type ImageCreateParams struct {

	/* XRegistryAuth.

	     A base64url-encoded auth configuration.

	Refer to the [authentication section](#section/Authentication) for
	details.

	*/
	XRegistryAuth *string

	/* Changes.

	     Apply `Bhojpurfile` instructions to the image that is created,
	for example: `changes=ENV DEBUG=true`.
	Note that `ENV DEBUG=true` should be URI component encoded.

	Supported `Bhojpurfile` instructions:
	`CMD`|`ENTRYPOINT`|`ENV`|`EXPOSE`|`ONBUILD`|`USER`|`VOLUME`|`WORKDIR`

	*/
	Changes []string

	/* FromImage.

	   Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
	*/
	FromImage *string

	/* FromSrc.

	   Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This parameter may only be used when importing an image.
	*/
	FromSrc *string

	/* InputImage.

	   Image content if the value `-` has been specified in fromSrc query parameter
	*/
	InputImage string

	/* Message.

	   Set commit message for imported image.
	*/
	Message *string

	/* Platform.

	     Platform in the format os[/arch[/variant]].

	When used in combination with the `fromImage` option, the daemon checks
	if the given image is present in the local image cache with the given
	OS and Architecture, and otherwise attempts to pull the image. If the
	option is not set, the host's native OS and Architecture are used.
	If the given image does not exist in the local image cache, the daemon
	attempts to pull the image with the host's native OS and Architecture.
	If the given image does exists in the local image cache, but its OS or
	architecture does not match, a warning is produced.

	When used with the `fromSrc` option to import an image from an archive,
	this option sets the platform information for the imported image. If
	the option is not set, the host's native OS and Architecture are used
	for the imported image.

	*/
	Platform *string

	/* Repo.

	   Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
	*/
	Repo *string

	/* Tag.

	   Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
	*/
	Tag *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the image create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ImageCreateParams) WithDefaults() *ImageCreateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the image create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ImageCreateParams) SetDefaults() {
	var (
		platformDefault = string("")
	)

	val := ImageCreateParams{
		Platform: &platformDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the image create params
func (o *ImageCreateParams) WithTimeout(timeout time.Duration) *ImageCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the image create params
func (o *ImageCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the image create params
func (o *ImageCreateParams) WithContext(ctx context.Context) *ImageCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the image create params
func (o *ImageCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the image create params
func (o *ImageCreateParams) WithHTTPClient(client *http.Client) *ImageCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the image create params
func (o *ImageCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRegistryAuth adds the xRegistryAuth to the image create params
func (o *ImageCreateParams) WithXRegistryAuth(xRegistryAuth *string) *ImageCreateParams {
	o.SetXRegistryAuth(xRegistryAuth)
	return o
}

// SetXRegistryAuth adds the xRegistryAuth to the image create params
func (o *ImageCreateParams) SetXRegistryAuth(xRegistryAuth *string) {
	o.XRegistryAuth = xRegistryAuth
}

// WithChanges adds the changes to the image create params
func (o *ImageCreateParams) WithChanges(changes []string) *ImageCreateParams {
	o.SetChanges(changes)
	return o
}

// SetChanges adds the changes to the image create params
func (o *ImageCreateParams) SetChanges(changes []string) {
	o.Changes = changes
}

// WithFromImage adds the fromImage to the image create params
func (o *ImageCreateParams) WithFromImage(fromImage *string) *ImageCreateParams {
	o.SetFromImage(fromImage)
	return o
}

// SetFromImage adds the fromImage to the image create params
func (o *ImageCreateParams) SetFromImage(fromImage *string) {
	o.FromImage = fromImage
}

// WithFromSrc adds the fromSrc to the image create params
func (o *ImageCreateParams) WithFromSrc(fromSrc *string) *ImageCreateParams {
	o.SetFromSrc(fromSrc)
	return o
}

// SetFromSrc adds the fromSrc to the image create params
func (o *ImageCreateParams) SetFromSrc(fromSrc *string) {
	o.FromSrc = fromSrc
}

// WithInputImage adds the inputImage to the image create params
func (o *ImageCreateParams) WithInputImage(inputImage string) *ImageCreateParams {
	o.SetInputImage(inputImage)
	return o
}

// SetInputImage adds the inputImage to the image create params
func (o *ImageCreateParams) SetInputImage(inputImage string) {
	o.InputImage = inputImage
}

// WithMessage adds the message to the image create params
func (o *ImageCreateParams) WithMessage(message *string) *ImageCreateParams {
	o.SetMessage(message)
	return o
}

// SetMessage adds the message to the image create params
func (o *ImageCreateParams) SetMessage(message *string) {
	o.Message = message
}

// WithPlatform adds the platform to the image create params
func (o *ImageCreateParams) WithPlatform(platform *string) *ImageCreateParams {
	o.SetPlatform(platform)
	return o
}

// SetPlatform adds the platform to the image create params
func (o *ImageCreateParams) SetPlatform(platform *string) {
	o.Platform = platform
}

// WithRepo adds the repo to the image create params
func (o *ImageCreateParams) WithRepo(repo *string) *ImageCreateParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the image create params
func (o *ImageCreateParams) SetRepo(repo *string) {
	o.Repo = repo
}

// WithTag adds the tag to the image create params
func (o *ImageCreateParams) WithTag(tag *string) *ImageCreateParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the image create params
func (o *ImageCreateParams) SetTag(tag *string) {
	o.Tag = tag
}

// WriteToRequest writes these params to a swagger request
func (o *ImageCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRegistryAuth != nil {

		// header param X-Registry-Auth
		if err := r.SetHeaderParam("X-Registry-Auth", *o.XRegistryAuth); err != nil {
			return err
		}
	}

	if o.Changes != nil {

		// binding items for changes
		joinedChanges := o.bindParamChanges(reg)

		// query array param changes
		if err := r.SetQueryParam("changes", joinedChanges...); err != nil {
			return err
		}
	}

	if o.FromImage != nil {

		// query param fromImage
		var qrFromImage string

		if o.FromImage != nil {
			qrFromImage = *o.FromImage
		}
		qFromImage := qrFromImage
		if qFromImage != "" {

			if err := r.SetQueryParam("fromImage", qFromImage); err != nil {
				return err
			}
		}
	}

	if o.FromSrc != nil {

		// query param fromSrc
		var qrFromSrc string

		if o.FromSrc != nil {
			qrFromSrc = *o.FromSrc
		}
		qFromSrc := qrFromSrc
		if qFromSrc != "" {

			if err := r.SetQueryParam("fromSrc", qFromSrc); err != nil {
				return err
			}
		}
	}
	if err := r.SetBodyParam(o.InputImage); err != nil {
		return err
	}

	if o.Message != nil {

		// query param message
		var qrMessage string

		if o.Message != nil {
			qrMessage = *o.Message
		}
		qMessage := qrMessage
		if qMessage != "" {

			if err := r.SetQueryParam("message", qMessage); err != nil {
				return err
			}
		}
	}

	if o.Platform != nil {

		// query param platform
		var qrPlatform string

		if o.Platform != nil {
			qrPlatform = *o.Platform
		}
		qPlatform := qrPlatform
		if qPlatform != "" {

			if err := r.SetQueryParam("platform", qPlatform); err != nil {
				return err
			}
		}
	}

	if o.Repo != nil {

		// query param repo
		var qrRepo string

		if o.Repo != nil {
			qrRepo = *o.Repo
		}
		qRepo := qrRepo
		if qRepo != "" {

			if err := r.SetQueryParam("repo", qRepo); err != nil {
				return err
			}
		}
	}

	if o.Tag != nil {

		// query param tag
		var qrTag string

		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {

			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamImageCreate binds the parameter changes
func (o *ImageCreateParams) bindParamChanges(formats strfmt.Registry) []string {
	changesIR := o.Changes

	var changesIC []string
	for _, changesIIR := range changesIR { // explode []string

		changesIIV := changesIIR // string as string
		changesIC = append(changesIC, changesIIV)
	}

	// items.CollectionFormat: ""
	changesIS := swag.JoinByFormat(changesIC, "")

	return changesIS
}
