// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/bhojpur/host/pkg/machine/models"
)

// NewPluginUpgradeParams creates a new PluginUpgradeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPluginUpgradeParams() *PluginUpgradeParams {
	return &PluginUpgradeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPluginUpgradeParamsWithTimeout creates a new PluginUpgradeParams object
// with the ability to set a timeout on a request.
func NewPluginUpgradeParamsWithTimeout(timeout time.Duration) *PluginUpgradeParams {
	return &PluginUpgradeParams{
		timeout: timeout,
	}
}

// NewPluginUpgradeParamsWithContext creates a new PluginUpgradeParams object
// with the ability to set a context for a request.
func NewPluginUpgradeParamsWithContext(ctx context.Context) *PluginUpgradeParams {
	return &PluginUpgradeParams{
		Context: ctx,
	}
}

// NewPluginUpgradeParamsWithHTTPClient creates a new PluginUpgradeParams object
// with the ability to set a custom HTTPClient for a request.
func NewPluginUpgradeParamsWithHTTPClient(client *http.Client) *PluginUpgradeParams {
	return &PluginUpgradeParams{
		HTTPClient: client,
	}
}

/* PluginUpgradeParams contains all the parameters to send to the API endpoint
   for the plugin upgrade operation.

   Typically these are written to a http.Request.
*/
type PluginUpgradeParams struct {

	/* XRegistryAuth.

	     A base64url-encoded auth configuration to use when pulling a plugin
	from a registry.

	Refer to the [authentication section](#section/Authentication) for
	details.

	*/
	XRegistryAuth *string

	// Body.
	Body []*models.PluginPrivilege

	/* Name.

	     The name of the plugin. The `:latest` tag is optional, and is the
	default if omitted.

	*/
	Name string

	/* Remote.

	     Remote reference to upgrade to.

	The `:latest` tag is optional, and is used as the default if omitted.

	*/
	Remote string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the plugin upgrade params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PluginUpgradeParams) WithDefaults() *PluginUpgradeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the plugin upgrade params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PluginUpgradeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the plugin upgrade params
func (o *PluginUpgradeParams) WithTimeout(timeout time.Duration) *PluginUpgradeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the plugin upgrade params
func (o *PluginUpgradeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the plugin upgrade params
func (o *PluginUpgradeParams) WithContext(ctx context.Context) *PluginUpgradeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the plugin upgrade params
func (o *PluginUpgradeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the plugin upgrade params
func (o *PluginUpgradeParams) WithHTTPClient(client *http.Client) *PluginUpgradeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the plugin upgrade params
func (o *PluginUpgradeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRegistryAuth adds the xRegistryAuth to the plugin upgrade params
func (o *PluginUpgradeParams) WithXRegistryAuth(xRegistryAuth *string) *PluginUpgradeParams {
	o.SetXRegistryAuth(xRegistryAuth)
	return o
}

// SetXRegistryAuth adds the xRegistryAuth to the plugin upgrade params
func (o *PluginUpgradeParams) SetXRegistryAuth(xRegistryAuth *string) {
	o.XRegistryAuth = xRegistryAuth
}

// WithBody adds the body to the plugin upgrade params
func (o *PluginUpgradeParams) WithBody(body []*models.PluginPrivilege) *PluginUpgradeParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the plugin upgrade params
func (o *PluginUpgradeParams) SetBody(body []*models.PluginPrivilege) {
	o.Body = body
}

// WithName adds the name to the plugin upgrade params
func (o *PluginUpgradeParams) WithName(name string) *PluginUpgradeParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the plugin upgrade params
func (o *PluginUpgradeParams) SetName(name string) {
	o.Name = name
}

// WithRemote adds the remote to the plugin upgrade params
func (o *PluginUpgradeParams) WithRemote(remote string) *PluginUpgradeParams {
	o.SetRemote(remote)
	return o
}

// SetRemote adds the remote to the plugin upgrade params
func (o *PluginUpgradeParams) SetRemote(remote string) {
	o.Remote = remote
}

// WriteToRequest writes these params to a swagger request
func (o *PluginUpgradeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRegistryAuth != nil {

		// header param X-Registry-Auth
		if err := r.SetHeaderParam("X-Registry-Auth", *o.XRegistryAuth); err != nil {
			return err
		}
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// query param remote
	qrRemote := o.Remote
	qRemote := qrRemote
	if qRemote != "" {

		if err := r.SetQueryParam("remote", qRemote); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
