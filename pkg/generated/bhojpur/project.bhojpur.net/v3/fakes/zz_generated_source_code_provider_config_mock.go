// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	"context"
	"sync"
	"time"

	apisprojectbhojpurnetv3 "github.com/bhojpur/host/pkg/apis/project.bhojpur.net/v3"
	"github.com/bhojpur/host/pkg/core/controller"
	"github.com/bhojpur/host/pkg/core/objectclient"
	bhojpurprojectbhojpurnetv3 "github.com/bhojpur/host/pkg/generated/bhojpur/project.bhojpur.net/v3"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

// Ensure, that SourceCodeProviderConfigListerMock does implement bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLister.
// If this is not the case, regenerate this file with moq.
var _ bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLister = &SourceCodeProviderConfigListerMock{}

// SourceCodeProviderConfigListerMock is a mock implementation of bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLister.
//
// 	func TestSomethingThatUsesSourceCodeProviderConfigLister(t *testing.T) {
//
// 		// make and configure a mocked bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLister
// 		mockedSourceCodeProviderConfigLister := &SourceCodeProviderConfigListerMock{
// 			GetFunc: func(namespace string, name string) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error) {
// 				panic("mock out the Get method")
// 			},
// 			ListFunc: func(namespace string, selector labels.Selector) ([]*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error) {
// 				panic("mock out the List method")
// 			},
// 		}
//
// 		// use mockedSourceCodeProviderConfigLister in code that requires bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLister
// 		// and then make assertions.
//
// 	}
type SourceCodeProviderConfigListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
	lockGet  sync.RWMutex
	lockList sync.RWMutex
}

// Get calls GetFunc.
func (mock *SourceCodeProviderConfigListerMock) Get(namespace string, name string) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error) {
	if mock.GetFunc == nil {
		panic("SourceCodeProviderConfigListerMock.GetFunc: method is nil but SourceCodeProviderConfigLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedSourceCodeProviderConfigLister.GetCalls())
func (mock *SourceCodeProviderConfigListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *SourceCodeProviderConfigListerMock) List(namespace string, selector labels.Selector) ([]*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error) {
	if mock.ListFunc == nil {
		panic("SourceCodeProviderConfigListerMock.ListFunc: method is nil but SourceCodeProviderConfigLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedSourceCodeProviderConfigLister.ListCalls())
func (mock *SourceCodeProviderConfigListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Ensure, that SourceCodeProviderConfigControllerMock does implement bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigController.
// If this is not the case, regenerate this file with moq.
var _ bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigController = &SourceCodeProviderConfigControllerMock{}

// SourceCodeProviderConfigControllerMock is a mock implementation of bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigController.
//
// 	func TestSomethingThatUsesSourceCodeProviderConfigController(t *testing.T) {
//
// 		// make and configure a mocked bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigController
// 		mockedSourceCodeProviderConfigController := &SourceCodeProviderConfigControllerMock{
// 			AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)  {
// 				panic("mock out the AddClusterScopedFeatureHandler method")
// 			},
// 			AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)  {
// 				panic("mock out the AddClusterScopedHandler method")
// 			},
// 			AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)  {
// 				panic("mock out the AddFeatureHandler method")
// 			},
// 			AddHandlerFunc: func(ctx context.Context, name string, handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)  {
// 				panic("mock out the AddHandler method")
// 			},
// 			EnqueueFunc: func(namespace string, name string)  {
// 				panic("mock out the Enqueue method")
// 			},
// 			EnqueueAfterFunc: func(namespace string, name string, after time.Duration)  {
// 				panic("mock out the EnqueueAfter method")
// 			},
// 			GenericFunc: func() controller.GenericController {
// 				panic("mock out the Generic method")
// 			},
// 			InformerFunc: func() cache.SharedIndexInformer {
// 				panic("mock out the Informer method")
// 			},
// 			ListerFunc: func() bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLister {
// 				panic("mock out the Lister method")
// 			},
// 		}
//
// 		// use mockedSourceCodeProviderConfigController in code that requires bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigController
// 		// and then make assertions.
//
// 	}
type SourceCodeProviderConfigControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// EnqueueAfterFunc mocks the EnqueueAfter method.
	EnqueueAfterFunc func(namespace string, name string, after time.Duration)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLister

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// SyncMoqParam is the syncMoqParam argument value.
			SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// EnqueueAfter holds details about calls to the EnqueueAfter method.
		EnqueueAfter []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// After is the after argument value.
			After time.Duration
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
	}
	lockAddClusterScopedFeatureHandler sync.RWMutex
	lockAddClusterScopedHandler        sync.RWMutex
	lockAddFeatureHandler              sync.RWMutex
	lockAddHandler                     sync.RWMutex
	lockEnqueue                        sync.RWMutex
	lockEnqueueAfter                   sync.RWMutex
	lockGeneric                        sync.RWMutex
	lockInformer                       sync.RWMutex
	lockLister                         sync.RWMutex
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *SourceCodeProviderConfigControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("SourceCodeProviderConfigControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but SourceCodeProviderConfigController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	mock.lockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	mock.lockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedSourceCodeProviderConfigController.AddClusterScopedFeatureHandlerCalls())
func (mock *SourceCodeProviderConfigControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}
	mock.lockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	mock.lockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *SourceCodeProviderConfigControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("SourceCodeProviderConfigControllerMock.AddClusterScopedHandlerFunc: method is nil but SourceCodeProviderConfigController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	mock.lockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	mock.lockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedSourceCodeProviderConfigController.AddClusterScopedHandlerCalls())
func (mock *SourceCodeProviderConfigControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}
	mock.lockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	mock.lockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *SourceCodeProviderConfigControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("SourceCodeProviderConfigControllerMock.AddFeatureHandlerFunc: method is nil but SourceCodeProviderConfigController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Enabled      func() bool
		Name         string
		SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}{
		Ctx:          ctx,
		Enabled:      enabled,
		Name:         name,
		SyncMoqParam: syncMoqParam,
	}
	mock.lockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	mock.lockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, syncMoqParam)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedSourceCodeProviderConfigController.AddFeatureHandlerCalls())
func (mock *SourceCodeProviderConfigControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx          context.Context
	Enabled      func() bool
	Name         string
	SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
} {
	var calls []struct {
		Ctx          context.Context
		Enabled      func() bool
		Name         string
		SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}
	mock.lockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	mock.lockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *SourceCodeProviderConfigControllerMock) AddHandler(ctx context.Context, name string, handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("SourceCodeProviderConfigControllerMock.AddHandlerFunc: method is nil but SourceCodeProviderConfigController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	mock.lockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	mock.lockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedSourceCodeProviderConfigController.AddHandlerCalls())
func (mock *SourceCodeProviderConfigControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}
	mock.lockAddHandler.RLock()
	calls = mock.calls.AddHandler
	mock.lockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *SourceCodeProviderConfigControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("SourceCodeProviderConfigControllerMock.EnqueueFunc: method is nil but SourceCodeProviderConfigController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	mock.lockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	mock.lockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedSourceCodeProviderConfigController.EnqueueCalls())
func (mock *SourceCodeProviderConfigControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	mock.lockEnqueue.RLock()
	calls = mock.calls.Enqueue
	mock.lockEnqueue.RUnlock()
	return calls
}

// EnqueueAfter calls EnqueueAfterFunc.
func (mock *SourceCodeProviderConfigControllerMock) EnqueueAfter(namespace string, name string, after time.Duration) {
	if mock.EnqueueAfterFunc == nil {
		panic("SourceCodeProviderConfigControllerMock.EnqueueAfterFunc: method is nil but SourceCodeProviderConfigController.EnqueueAfter was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		After     time.Duration
	}{
		Namespace: namespace,
		Name:      name,
		After:     after,
	}
	mock.lockEnqueueAfter.Lock()
	mock.calls.EnqueueAfter = append(mock.calls.EnqueueAfter, callInfo)
	mock.lockEnqueueAfter.Unlock()
	mock.EnqueueAfterFunc(namespace, name, after)
}

// EnqueueAfterCalls gets all the calls that were made to EnqueueAfter.
// Check the length with:
//     len(mockedSourceCodeProviderConfigController.EnqueueAfterCalls())
func (mock *SourceCodeProviderConfigControllerMock) EnqueueAfterCalls() []struct {
	Namespace string
	Name      string
	After     time.Duration
} {
	var calls []struct {
		Namespace string
		Name      string
		After     time.Duration
	}
	mock.lockEnqueueAfter.RLock()
	calls = mock.calls.EnqueueAfter
	mock.lockEnqueueAfter.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *SourceCodeProviderConfigControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("SourceCodeProviderConfigControllerMock.GenericFunc: method is nil but SourceCodeProviderConfigController.Generic was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	mock.lockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedSourceCodeProviderConfigController.GenericCalls())
func (mock *SourceCodeProviderConfigControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGeneric.RLock()
	calls = mock.calls.Generic
	mock.lockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *SourceCodeProviderConfigControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("SourceCodeProviderConfigControllerMock.InformerFunc: method is nil but SourceCodeProviderConfigController.Informer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	mock.lockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedSourceCodeProviderConfigController.InformerCalls())
func (mock *SourceCodeProviderConfigControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInformer.RLock()
	calls = mock.calls.Informer
	mock.lockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *SourceCodeProviderConfigControllerMock) Lister() bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLister {
	if mock.ListerFunc == nil {
		panic("SourceCodeProviderConfigControllerMock.ListerFunc: method is nil but SourceCodeProviderConfigController.Lister was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	mock.lockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedSourceCodeProviderConfigController.ListerCalls())
func (mock *SourceCodeProviderConfigControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLister.RLock()
	calls = mock.calls.Lister
	mock.lockLister.RUnlock()
	return calls
}

// Ensure, that SourceCodeProviderConfigInterfaceMock does implement bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigInterface.
// If this is not the case, regenerate this file with moq.
var _ bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigInterface = &SourceCodeProviderConfigInterfaceMock{}

// SourceCodeProviderConfigInterfaceMock is a mock implementation of bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigInterface.
//
// 	func TestSomethingThatUsesSourceCodeProviderConfigInterface(t *testing.T) {
//
// 		// make and configure a mocked bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigInterface
// 		mockedSourceCodeProviderConfigInterface := &SourceCodeProviderConfigInterfaceMock{
// 			AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)  {
// 				panic("mock out the AddClusterScopedFeatureHandler method")
// 			},
// 			AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle)  {
// 				panic("mock out the AddClusterScopedFeatureLifecycle method")
// 			},
// 			AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)  {
// 				panic("mock out the AddClusterScopedHandler method")
// 			},
// 			AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle)  {
// 				panic("mock out the AddClusterScopedLifecycle method")
// 			},
// 			AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)  {
// 				panic("mock out the AddFeatureHandler method")
// 			},
// 			AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle)  {
// 				panic("mock out the AddFeatureLifecycle method")
// 			},
// 			AddHandlerFunc: func(ctx context.Context, name string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)  {
// 				panic("mock out the AddHandler method")
// 			},
// 			AddLifecycleFunc: func(ctx context.Context, name string, lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle)  {
// 				panic("mock out the AddLifecycle method")
// 			},
// 			ControllerFunc: func() bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigController {
// 				panic("mock out the Controller method")
// 			},
// 			CreateFunc: func(sourceCodeProviderConfig *apisprojectbhojpurnetv3.SourceCodeProviderConfig) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error) {
// 				panic("mock out the Create method")
// 			},
// 			DeleteFunc: func(name string, options *metav1.DeleteOptions) error {
// 				panic("mock out the Delete method")
// 			},
// 			DeleteCollectionFunc: func(deleteOpts *metav1.DeleteOptions, listOpts metav1.ListOptions) error {
// 				panic("mock out the DeleteCollection method")
// 			},
// 			DeleteNamespacedFunc: func(namespace string, name string, options *metav1.DeleteOptions) error {
// 				panic("mock out the DeleteNamespaced method")
// 			},
// 			GetFunc: func(name string, opts metav1.GetOptions) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error) {
// 				panic("mock out the Get method")
// 			},
// 			GetNamespacedFunc: func(namespace string, name string, opts metav1.GetOptions) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error) {
// 				panic("mock out the GetNamespaced method")
// 			},
// 			ListFunc: func(opts metav1.ListOptions) (*apisprojectbhojpurnetv3.SourceCodeProviderConfigList, error) {
// 				panic("mock out the List method")
// 			},
// 			ListNamespacedFunc: func(namespace string, opts metav1.ListOptions) (*apisprojectbhojpurnetv3.SourceCodeProviderConfigList, error) {
// 				panic("mock out the ListNamespaced method")
// 			},
// 			ObjectClientFunc: func() *objectclient.ObjectClient {
// 				panic("mock out the ObjectClient method")
// 			},
// 			UpdateFunc: func(sourceCodeProviderConfig *apisprojectbhojpurnetv3.SourceCodeProviderConfig) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error) {
// 				panic("mock out the Update method")
// 			},
// 			WatchFunc: func(opts metav1.ListOptions) (watch.Interface, error) {
// 				panic("mock out the Watch method")
// 			},
// 		}
//
// 		// use mockedSourceCodeProviderConfigInterface in code that requires bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigInterface
// 		// and then make assertions.
//
// 	}
type SourceCodeProviderConfigInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigController

	// CreateFunc mocks the Create method.
	CreateFunc func(sourceCodeProviderConfig *apisprojectbhojpurnetv3.SourceCodeProviderConfig) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *metav1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *metav1.DeleteOptions, listOpts metav1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *metav1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts metav1.GetOptions) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts metav1.GetOptions) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error)

	// ListFunc mocks the List method.
	ListFunc func(opts metav1.ListOptions) (*apisprojectbhojpurnetv3.SourceCodeProviderConfigList, error)

	// ListNamespacedFunc mocks the ListNamespaced method.
	ListNamespacedFunc func(namespace string, opts metav1.ListOptions) (*apisprojectbhojpurnetv3.SourceCodeProviderConfigList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(sourceCodeProviderConfig *apisprojectbhojpurnetv3.SourceCodeProviderConfig) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts metav1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// SyncMoqParam is the syncMoqParam argument value.
			SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// SyncMoqParam is the syncMoqParam argument value.
			SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// SyncMoqParam is the syncMoqParam argument value.
			SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// SyncMoqParam is the syncMoqParam argument value.
			SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// SourceCodeProviderConfig is the sourceCodeProviderConfig argument value.
			SourceCodeProviderConfig *apisprojectbhojpurnetv3.SourceCodeProviderConfig
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *metav1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *metav1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts metav1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *metav1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts metav1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts metav1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
		// ListNamespaced holds details about calls to the ListNamespaced method.
		ListNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// SourceCodeProviderConfig is the sourceCodeProviderConfig argument value.
			SourceCodeProviderConfig *apisprojectbhojpurnetv3.SourceCodeProviderConfig
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
	}
	lockAddClusterScopedFeatureHandler   sync.RWMutex
	lockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockAddClusterScopedHandler          sync.RWMutex
	lockAddClusterScopedLifecycle        sync.RWMutex
	lockAddFeatureHandler                sync.RWMutex
	lockAddFeatureLifecycle              sync.RWMutex
	lockAddHandler                       sync.RWMutex
	lockAddLifecycle                     sync.RWMutex
	lockController                       sync.RWMutex
	lockCreate                           sync.RWMutex
	lockDelete                           sync.RWMutex
	lockDeleteCollection                 sync.RWMutex
	lockDeleteNamespaced                 sync.RWMutex
	lockGet                              sync.RWMutex
	lockGetNamespaced                    sync.RWMutex
	lockList                             sync.RWMutex
	lockListNamespaced                   sync.RWMutex
	lockObjectClient                     sync.RWMutex
	lockUpdate                           sync.RWMutex
	lockWatch                            sync.RWMutex
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but SourceCodeProviderConfigInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Enabled      func() bool
		Name         string
		ClusterName  string
		SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}{
		Ctx:          ctx,
		Enabled:      enabled,
		Name:         name,
		ClusterName:  clusterName,
		SyncMoqParam: syncMoqParam,
	}
	mock.lockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	mock.lockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, syncMoqParam)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx          context.Context
	Enabled      func() bool
	Name         string
	ClusterName  string
	SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
} {
	var calls []struct {
		Ctx          context.Context
		Enabled      func() bool
		Name         string
		ClusterName  string
		SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}
	mock.lockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	mock.lockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but SourceCodeProviderConfigInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	mock.lockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	mock.lockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
	}
	mock.lockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	mock.lockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.AddClusterScopedHandlerFunc: method is nil but SourceCodeProviderConfigInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Name         string
		ClusterName  string
		SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}{
		Ctx:          ctx,
		Name:         name,
		ClusterName:  clusterName,
		SyncMoqParam: syncMoqParam,
	}
	mock.lockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	mock.lockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, syncMoqParam)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.AddClusterScopedHandlerCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx          context.Context
	Name         string
	ClusterName  string
	SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
} {
	var calls []struct {
		Ctx          context.Context
		Name         string
		ClusterName  string
		SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}
	mock.lockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	mock.lockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but SourceCodeProviderConfigInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	mock.lockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	mock.lockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.AddClusterScopedLifecycleCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
	}
	mock.lockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	mock.lockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.AddFeatureHandlerFunc: method is nil but SourceCodeProviderConfigInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Enabled      func() bool
		Name         string
		SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}{
		Ctx:          ctx,
		Enabled:      enabled,
		Name:         name,
		SyncMoqParam: syncMoqParam,
	}
	mock.lockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	mock.lockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, syncMoqParam)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.AddFeatureHandlerCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx          context.Context
	Enabled      func() bool
	Name         string
	SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
} {
	var calls []struct {
		Ctx          context.Context
		Enabled      func() bool
		Name         string
		SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}
	mock.lockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	mock.lockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.AddFeatureLifecycleFunc: method is nil but SourceCodeProviderConfigInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	mock.lockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	mock.lockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.AddFeatureLifecycleCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
	}
	mock.lockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	mock.lockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) AddHandler(ctx context.Context, name string, syncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.AddHandlerFunc: method is nil but SourceCodeProviderConfigInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Name         string
		SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}{
		Ctx:          ctx,
		Name:         name,
		SyncMoqParam: syncMoqParam,
	}
	mock.lockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	mock.lockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, syncMoqParam)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.AddHandlerCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) AddHandlerCalls() []struct {
	Ctx          context.Context
	Name         string
	SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
} {
	var calls []struct {
		Ctx          context.Context
		Name         string
		SyncMoqParam bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigHandlerFunc
	}
	mock.lockAddHandler.RLock()
	calls = mock.calls.AddHandler
	mock.lockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.AddLifecycleFunc: method is nil but SourceCodeProviderConfigInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	mock.lockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	mock.lockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.AddLifecycleCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigLifecycle
	}
	mock.lockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	mock.lockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) Controller() bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigController {
	if mock.ControllerFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.ControllerFunc: method is nil but SourceCodeProviderConfigInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	mock.lockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	mock.lockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.ControllerCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockController.RLock()
	calls = mock.calls.Controller
	mock.lockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) Create(sourceCodeProviderConfig *apisprojectbhojpurnetv3.SourceCodeProviderConfig) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error) {
	if mock.CreateFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.CreateFunc: method is nil but SourceCodeProviderConfigInterface.Create was just called")
	}
	callInfo := struct {
		SourceCodeProviderConfig *apisprojectbhojpurnetv3.SourceCodeProviderConfig
	}{
		SourceCodeProviderConfig: sourceCodeProviderConfig,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(sourceCodeProviderConfig)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.CreateCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) CreateCalls() []struct {
	SourceCodeProviderConfig *apisprojectbhojpurnetv3.SourceCodeProviderConfig
} {
	var calls []struct {
		SourceCodeProviderConfig *apisprojectbhojpurnetv3.SourceCodeProviderConfig
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) Delete(name string, options *metav1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.DeleteFunc: method is nil but SourceCodeProviderConfigInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *metav1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.DeleteCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *metav1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *metav1.DeleteOptions
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) DeleteCollection(deleteOpts *metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.DeleteCollectionFunc: method is nil but SourceCodeProviderConfigInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *metav1.DeleteOptions
		ListOpts   metav1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	mock.lockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	mock.lockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.DeleteCollectionCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *metav1.DeleteOptions
	ListOpts   metav1.ListOptions
} {
	var calls []struct {
		DeleteOpts *metav1.DeleteOptions
		ListOpts   metav1.ListOptions
	}
	mock.lockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	mock.lockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) DeleteNamespaced(namespace string, name string, options *metav1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.DeleteNamespacedFunc: method is nil but SourceCodeProviderConfigInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *metav1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	mock.lockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	mock.lockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.DeleteNamespacedCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *metav1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *metav1.DeleteOptions
	}
	mock.lockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	mock.lockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) Get(name string, opts metav1.GetOptions) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error) {
	if mock.GetFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.GetFunc: method is nil but SourceCodeProviderConfigInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts metav1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.GetCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) GetCalls() []struct {
	Name string
	Opts metav1.GetOptions
} {
	var calls []struct {
		Name string
		Opts metav1.GetOptions
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) GetNamespaced(namespace string, name string, opts metav1.GetOptions) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error) {
	if mock.GetNamespacedFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.GetNamespacedFunc: method is nil but SourceCodeProviderConfigInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      metav1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	mock.lockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	mock.lockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.GetNamespacedCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      metav1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      metav1.GetOptions
	}
	mock.lockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	mock.lockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) List(opts metav1.ListOptions) (*apisprojectbhojpurnetv3.SourceCodeProviderConfigList, error) {
	if mock.ListFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.ListFunc: method is nil but SourceCodeProviderConfigInterface.List was just called")
	}
	callInfo := struct {
		Opts metav1.ListOptions
	}{
		Opts: opts,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.ListCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) ListCalls() []struct {
	Opts metav1.ListOptions
} {
	var calls []struct {
		Opts metav1.ListOptions
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ListNamespaced calls ListNamespacedFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) ListNamespaced(namespace string, opts metav1.ListOptions) (*apisprojectbhojpurnetv3.SourceCodeProviderConfigList, error) {
	if mock.ListNamespacedFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.ListNamespacedFunc: method is nil but SourceCodeProviderConfigInterface.ListNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      metav1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	mock.lockListNamespaced.Lock()
	mock.calls.ListNamespaced = append(mock.calls.ListNamespaced, callInfo)
	mock.lockListNamespaced.Unlock()
	return mock.ListNamespacedFunc(namespace, opts)
}

// ListNamespacedCalls gets all the calls that were made to ListNamespaced.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.ListNamespacedCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) ListNamespacedCalls() []struct {
	Namespace string
	Opts      metav1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      metav1.ListOptions
	}
	mock.lockListNamespaced.RLock()
	calls = mock.calls.ListNamespaced
	mock.lockListNamespaced.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.ObjectClientFunc: method is nil but SourceCodeProviderConfigInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	mock.lockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	mock.lockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.ObjectClientCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	mock.lockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) Update(sourceCodeProviderConfig *apisprojectbhojpurnetv3.SourceCodeProviderConfig) (*apisprojectbhojpurnetv3.SourceCodeProviderConfig, error) {
	if mock.UpdateFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.UpdateFunc: method is nil but SourceCodeProviderConfigInterface.Update was just called")
	}
	callInfo := struct {
		SourceCodeProviderConfig *apisprojectbhojpurnetv3.SourceCodeProviderConfig
	}{
		SourceCodeProviderConfig: sourceCodeProviderConfig,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(sourceCodeProviderConfig)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.UpdateCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) UpdateCalls() []struct {
	SourceCodeProviderConfig *apisprojectbhojpurnetv3.SourceCodeProviderConfig
} {
	var calls []struct {
		SourceCodeProviderConfig *apisprojectbhojpurnetv3.SourceCodeProviderConfig
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *SourceCodeProviderConfigInterfaceMock) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("SourceCodeProviderConfigInterfaceMock.WatchFunc: method is nil but SourceCodeProviderConfigInterface.Watch was just called")
	}
	callInfo := struct {
		Opts metav1.ListOptions
	}{
		Opts: opts,
	}
	mock.lockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	mock.lockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedSourceCodeProviderConfigInterface.WatchCalls())
func (mock *SourceCodeProviderConfigInterfaceMock) WatchCalls() []struct {
	Opts metav1.ListOptions
} {
	var calls []struct {
		Opts metav1.ListOptions
	}
	mock.lockWatch.RLock()
	calls = mock.calls.Watch
	mock.lockWatch.RUnlock()
	return calls
}

// Ensure, that SourceCodeProviderConfigsGetterMock does implement bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigsGetter.
// If this is not the case, regenerate this file with moq.
var _ bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigsGetter = &SourceCodeProviderConfigsGetterMock{}

// SourceCodeProviderConfigsGetterMock is a mock implementation of bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigsGetter.
//
// 	func TestSomethingThatUsesSourceCodeProviderConfigsGetter(t *testing.T) {
//
// 		// make and configure a mocked bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigsGetter
// 		mockedSourceCodeProviderConfigsGetter := &SourceCodeProviderConfigsGetterMock{
// 			SourceCodeProviderConfigsFunc: func(namespace string) bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigInterface {
// 				panic("mock out the SourceCodeProviderConfigs method")
// 			},
// 		}
//
// 		// use mockedSourceCodeProviderConfigsGetter in code that requires bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigsGetter
// 		// and then make assertions.
//
// 	}
type SourceCodeProviderConfigsGetterMock struct {
	// SourceCodeProviderConfigsFunc mocks the SourceCodeProviderConfigs method.
	SourceCodeProviderConfigsFunc func(namespace string) bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigInterface

	// calls tracks calls to the methods.
	calls struct {
		// SourceCodeProviderConfigs holds details about calls to the SourceCodeProviderConfigs method.
		SourceCodeProviderConfigs []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
	lockSourceCodeProviderConfigs sync.RWMutex
}

// SourceCodeProviderConfigs calls SourceCodeProviderConfigsFunc.
func (mock *SourceCodeProviderConfigsGetterMock) SourceCodeProviderConfigs(namespace string) bhojpurprojectbhojpurnetv3.SourceCodeProviderConfigInterface {
	if mock.SourceCodeProviderConfigsFunc == nil {
		panic("SourceCodeProviderConfigsGetterMock.SourceCodeProviderConfigsFunc: method is nil but SourceCodeProviderConfigsGetter.SourceCodeProviderConfigs was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockSourceCodeProviderConfigs.Lock()
	mock.calls.SourceCodeProviderConfigs = append(mock.calls.SourceCodeProviderConfigs, callInfo)
	mock.lockSourceCodeProviderConfigs.Unlock()
	return mock.SourceCodeProviderConfigsFunc(namespace)
}

// SourceCodeProviderConfigsCalls gets all the calls that were made to SourceCodeProviderConfigs.
// Check the length with:
//     len(mockedSourceCodeProviderConfigsGetter.SourceCodeProviderConfigsCalls())
func (mock *SourceCodeProviderConfigsGetterMock) SourceCodeProviderConfigsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockSourceCodeProviderConfigs.RLock()
	calls = mock.calls.SourceCodeProviderConfigs
	mock.lockSourceCodeProviderConfigs.RUnlock()
	return calls
}
