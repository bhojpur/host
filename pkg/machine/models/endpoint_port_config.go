// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EndpointPortConfig endpoint port config
//
// swagger:model EndpointPortConfig
type EndpointPortConfig struct {

	// name
	Name string `json:"Name,omitempty"`

	// protocol
	// Enum: [tcp udp sctp]
	Protocol string `json:"Protocol,omitempty"`

	// The mode in which port is published.
	//
	// <p><br /></p>
	//
	// - "ingress" makes the target port accessible on every node,
	//   regardless of whether there is a task for the service running on
	//   that node or not.
	// - "host" bypasses the routing mesh and publish the port directly on
	//   the swarm node where that service is running.
	//
	// Example: ingress
	// Enum: [ingress host]
	PublishMode *string `json:"PublishMode,omitempty"`

	// The port on the swarm hosts.
	PublishedPort int64 `json:"PublishedPort,omitempty"`

	// The port inside the container.
	TargetPort int64 `json:"TargetPort,omitempty"`
}

// Validate validates this endpoint port config
func (m *EndpointPortConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var endpointPortConfigTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tcp","udp","sctp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		endpointPortConfigTypeProtocolPropEnum = append(endpointPortConfigTypeProtocolPropEnum, v)
	}
}

const (

	// EndpointPortConfigProtocolTCP captures enum value "tcp"
	EndpointPortConfigProtocolTCP string = "tcp"

	// EndpointPortConfigProtocolUDP captures enum value "udp"
	EndpointPortConfigProtocolUDP string = "udp"

	// EndpointPortConfigProtocolSctp captures enum value "sctp"
	EndpointPortConfigProtocolSctp string = "sctp"
)

// prop value enum
func (m *EndpointPortConfig) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, endpointPortConfigTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EndpointPortConfig) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("Protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

var endpointPortConfigTypePublishModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ingress","host"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		endpointPortConfigTypePublishModePropEnum = append(endpointPortConfigTypePublishModePropEnum, v)
	}
}

const (

	// EndpointPortConfigPublishModeIngress captures enum value "ingress"
	EndpointPortConfigPublishModeIngress string = "ingress"

	// EndpointPortConfigPublishModeHost captures enum value "host"
	EndpointPortConfigPublishModeHost string = "host"
)

// prop value enum
func (m *EndpointPortConfig) validatePublishModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, endpointPortConfigTypePublishModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EndpointPortConfig) validatePublishMode(formats strfmt.Registry) error {
	if swag.IsZero(m.PublishMode) { // not required
		return nil
	}

	// value enum
	if err := m.validatePublishModeEnum("PublishMode", "body", *m.PublishMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this endpoint port config based on context it is used
func (m *EndpointPortConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EndpointPortConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndpointPortConfig) UnmarshalBinary(b []byte) error {
	var res EndpointPortConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
