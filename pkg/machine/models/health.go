// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Health Health stores information about the container's healthcheck results.
//
//
// swagger:model Health
type Health struct {

	// FailingStreak is the number of consecutive failures
	// Example: 0
	FailingStreak int64 `json:"FailingStreak,omitempty"`

	// Log contains the last few results (oldest first)
	//
	Log []*HealthcheckResult `json:"Log"`

	// Status is one of `none`, `starting`, `healthy` or `unhealthy`
	//
	// - "none"      Indicates there is no healthcheck
	// - "starting"  Starting indicates that the container is not yet ready
	// - "healthy"   Healthy indicates that the container is running correctly
	// - "unhealthy" Unhealthy indicates that the container has a problem
	//
	// Example: healthy
	// Enum: [none starting healthy unhealthy]
	Status string `json:"Status,omitempty"`
}

// Validate validates this health
func (m *Health) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Health) validateLog(formats strfmt.Registry) error {
	if swag.IsZero(m.Log) { // not required
		return nil
	}

	for i := 0; i < len(m.Log); i++ {
		if swag.IsZero(m.Log[i]) { // not required
			continue
		}

		if m.Log[i] != nil {
			if err := m.Log[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Log" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Log" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var healthTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","starting","healthy","unhealthy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		healthTypeStatusPropEnum = append(healthTypeStatusPropEnum, v)
	}
}

const (

	// HealthStatusNone captures enum value "none"
	HealthStatusNone string = "none"

	// HealthStatusStarting captures enum value "starting"
	HealthStatusStarting string = "starting"

	// HealthStatusHealthy captures enum value "healthy"
	HealthStatusHealthy string = "healthy"

	// HealthStatusUnhealthy captures enum value "unhealthy"
	HealthStatusUnhealthy string = "unhealthy"
)

// prop value enum
func (m *Health) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, healthTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Health) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this health based on the context it is used
func (m *Health) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Health) contextValidateLog(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Log); i++ {

		if m.Log[i] != nil {
			if err := m.Log[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Log" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Log" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Health) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Health) UnmarshalBinary(b []byte) error {
	var res Health
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
