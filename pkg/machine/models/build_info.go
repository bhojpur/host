// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BuildInfo build info
//
// swagger:model BuildInfo
type BuildInfo struct {

	// aux
	Aux *ImageID `json:"aux,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// error detail
	ErrorDetail *ErrorDetail `json:"errorDetail,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// progress
	Progress string `json:"progress,omitempty"`

	// progress detail
	ProgressDetail *ProgressDetail `json:"progressDetail,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// stream
	Stream string `json:"stream,omitempty"`
}

// Validate validates this build info
func (m *BuildInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAux(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgressDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildInfo) validateAux(formats strfmt.Registry) error {
	if swag.IsZero(m.Aux) { // not required
		return nil
	}

	if m.Aux != nil {
		if err := m.Aux.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aux")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aux")
			}
			return err
		}
	}

	return nil
}

func (m *BuildInfo) validateErrorDetail(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorDetail) { // not required
		return nil
	}

	if m.ErrorDetail != nil {
		if err := m.ErrorDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorDetail")
			}
			return err
		}
	}

	return nil
}

func (m *BuildInfo) validateProgressDetail(formats strfmt.Registry) error {
	if swag.IsZero(m.ProgressDetail) { // not required
		return nil
	}

	if m.ProgressDetail != nil {
		if err := m.ProgressDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progressDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progressDetail")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this build info based on the context it is used
func (m *BuildInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAux(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProgressDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildInfo) contextValidateAux(ctx context.Context, formats strfmt.Registry) error {

	if m.Aux != nil {
		if err := m.Aux.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aux")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aux")
			}
			return err
		}
	}

	return nil
}

func (m *BuildInfo) contextValidateErrorDetail(ctx context.Context, formats strfmt.Registry) error {

	if m.ErrorDetail != nil {
		if err := m.ErrorDetail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorDetail")
			}
			return err
		}
	}

	return nil
}

func (m *BuildInfo) contextValidateProgressDetail(ctx context.Context, formats strfmt.Registry) error {

	if m.ProgressDetail != nil {
		if err := m.ProgressDetail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progressDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progressDetail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildInfo) UnmarshalBinary(b []byte) error {
	var res BuildInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
