// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LocalNodeState Current local status of this node.
// Example: active
//
// swagger:model LocalNodeState
type LocalNodeState string

func NewLocalNodeState(value LocalNodeState) *LocalNodeState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LocalNodeState.
func (m LocalNodeState) Pointer() *LocalNodeState {
	return &m
}

const (

	// LocalNodeStateEmpty captures enum value ""
	LocalNodeStateEmpty LocalNodeState = ""

	// LocalNodeStateInactive captures enum value "inactive"
	LocalNodeStateInactive LocalNodeState = "inactive"

	// LocalNodeStatePending captures enum value "pending"
	LocalNodeStatePending LocalNodeState = "pending"

	// LocalNodeStateActive captures enum value "active"
	LocalNodeStateActive LocalNodeState = "active"

	// LocalNodeStateError captures enum value "error"
	LocalNodeStateError LocalNodeState = "error"

	// LocalNodeStateLocked captures enum value "locked"
	LocalNodeStateLocked LocalNodeState = "locked"
)

// for schema
var localNodeStateEnum []interface{}

func init() {
	var res []LocalNodeState
	if err := json.Unmarshal([]byte(`["","inactive","pending","active","error","locked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		localNodeStateEnum = append(localNodeStateEnum, v)
	}
}

func (m LocalNodeState) validateLocalNodeStateEnum(path, location string, value LocalNodeState) error {
	if err := validate.EnumCase(path, location, value, localNodeStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this local node state
func (m LocalNodeState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLocalNodeStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this local node state based on context it is used
func (m LocalNodeState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
