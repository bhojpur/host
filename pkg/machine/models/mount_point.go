// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MountPoint MountPoint represents a mount point configuration inside the container.
// This is used for reporting the mountpoints in use by a container.
//
//
// swagger:model MountPoint
type MountPoint struct {

	// Destination is the path relative to the container root (`/`) where
	// the `Source` is mounted inside the container.
	//
	// Example: /usr/share/nginx/html/
	Destination string `json:"Destination,omitempty"`

	// Driver is the volume driver used to create the volume (if it is a volume).
	//
	// Example: local
	Driver string `json:"Driver,omitempty"`

	// Mode is a comma separated list of options supplied by the user when
	// creating the bind/volume mount.
	//
	// The default is platform-specific (`"z"` on Linux, empty on Windows).
	//
	// Example: z
	Mode string `json:"Mode,omitempty"`

	// Name is the name reference to the underlying data defined by `Source`
	// e.g., the volume name.
	//
	// Example: myvolume
	Name string `json:"Name,omitempty"`

	// Propagation describes how mounts are propagated from the host into the
	// mount point, and vice-versa. Refer to the [Linux kernel documentation](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt)
	// for details. This field is not used on Windows.
	//
	Propagation string `json:"Propagation,omitempty"`

	// Whether the mount is mounted writable (read-write).
	//
	// Example: true
	RW bool `json:"RW,omitempty"`

	// Source location of the mount.
	//
	// For volumes, this contains the storage location of the volume (within
	// `/var/lib/bhojpur/volumes/`). For bind-mounts, and `npipe`, this contains
	// the source (host) part of the bind-mount. For `tmpfs` mount points, this
	// field is empty.
	//
	// Example: /var/lib/bhojpur/volumes/myvolume/_data
	Source string `json:"Source,omitempty"`

	// The mount type:
	//
	// - `bind` a mount of a file or directory from the host into the container.
	// - `volume` a Bhojpur Host volume with the given `Name`.
	// - `tmpfs` a `tmpfs`.
	// - `npipe` a named pipe from the host into the container.
	//
	// Example: volume
	// Enum: [bind volume tmpfs npipe]
	Type string `json:"Type,omitempty"`
}

// Validate validates this mount point
func (m *MountPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mountPointTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bind","volume","tmpfs","npipe"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mountPointTypeTypePropEnum = append(mountPointTypeTypePropEnum, v)
	}
}

const (

	// MountPointTypeBind captures enum value "bind"
	MountPointTypeBind string = "bind"

	// MountPointTypeVolume captures enum value "volume"
	MountPointTypeVolume string = "volume"

	// MountPointTypeTmpfs captures enum value "tmpfs"
	MountPointTypeTmpfs string = "tmpfs"

	// MountPointTypeNpipe captures enum value "npipe"
	MountPointTypeNpipe string = "npipe"
)

// prop value enum
func (m *MountPoint) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mountPointTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MountPoint) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mount point based on context it is used
func (m *MountPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MountPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MountPoint) UnmarshalBinary(b []byte) error {
	var res MountPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
