// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MachineDescription MachineDescription provides information about a Bhojpur Host.
//
// swagger:model MachineDescription
type MachineDescription struct {

	// labels
	// Example: {"foo":"bar"}
	Labels map[string]string `json:"Labels,omitempty"`

	// machine version
	// Example: 17.06.0
	MachineVersion string `json:"MachineVersion,omitempty"`

	// plugins
	// Example: [{"Name":"awslogs","Type":"Log"},{"Name":"fluentd","Type":"Log"},{"Name":"gcplogs","Type":"Log"},{"Name":"gelf","Type":"Log"},{"Name":"journald","Type":"Log"},{"Name":"json-file","Type":"Log"},{"Name":"logentries","Type":"Log"},{"Name":"splunk","Type":"Log"},{"Name":"syslog","Type":"Log"},{"Name":"bridge","Type":"Network"},{"Name":"host","Type":"Network"},{"Name":"ipvlan","Type":"Network"},{"Name":"macvlan","Type":"Network"},{"Name":"null","Type":"Network"},{"Name":"overlay","Type":"Network"},{"Name":"local","Type":"Volume"},{"Name":"localhost:5000/vieux/sshfs:latest","Type":"Volume"},{"Name":"vieux/sshfs:latest","Type":"Volume"}]
	Plugins []*MachineDescriptionPluginsItems0 `json:"Plugins"`
}

// Validate validates this machine description
func (m *MachineDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlugins(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MachineDescription) validatePlugins(formats strfmt.Registry) error {
	if swag.IsZero(m.Plugins) { // not required
		return nil
	}

	for i := 0; i < len(m.Plugins); i++ {
		if swag.IsZero(m.Plugins[i]) { // not required
			continue
		}

		if m.Plugins[i] != nil {
			if err := m.Plugins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Plugins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this machine description based on the context it is used
func (m *MachineDescription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlugins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MachineDescription) contextValidatePlugins(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Plugins); i++ {

		if m.Plugins[i] != nil {
			if err := m.Plugins[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Plugins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MachineDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MachineDescription) UnmarshalBinary(b []byte) error {
	var res MachineDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MachineDescriptionPluginsItems0 machine description plugins items0
//
// swagger:model MachineDescriptionPluginsItems0
type MachineDescriptionPluginsItems0 struct {

	// name
	Name string `json:"Name,omitempty"`

	// type
	Type string `json:"Type,omitempty"`
}

// Validate validates this machine description plugins items0
func (m *MachineDescriptionPluginsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this machine description plugins items0 based on context it is used
func (m *MachineDescriptionPluginsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MachineDescriptionPluginsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MachineDescriptionPluginsItems0) UnmarshalBinary(b []byte) error {
	var res MachineDescriptionPluginsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
