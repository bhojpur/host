// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageInspect Information about an image in the local image cache.
//
//
// swagger:model ImageInspect
type ImageInspect struct {

	// Hardware CPU architecture that the image runs on.
	//
	// Example: arm
	Architecture string `json:"Architecture,omitempty"`

	// Name of the author that was specified when committing the image, or as
	// specified through MAINTAINER (deprecated) in the Bhojpurfile.
	//
	Author string `json:"Author,omitempty"`

	// The version of Bhojpur Host that was used to build the image.
	//
	// Depending on how the image was created, this field may be empty.
	//
	// Example: 20.10.7
	BhojpurVersion string `json:"BhojpurVersion,omitempty"`

	// Optional message that was set when committing or importing the image.
	//
	Comment string `json:"Comment,omitempty"`

	// config
	Config *ContainerConfig `json:"Config,omitempty"`

	// The ID of the container that was used to create the image.
	//
	// Depending on how the image was created, this field may be empty.
	//
	// Example: 65974bc86f1770ae4bff79f651ebdbce166ae9aada632ee3fa9af3a264911735
	Container string `json:"Container,omitempty"`

	// container config
	ContainerConfig *ContainerConfig `json:"ContainerConfig,omitempty"`

	// Date and time at which the image was created, formatted in
	// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
	//
	// Example: 2022-02-04T21:20:12.497794809Z
	Created string `json:"Created,omitempty"`

	// graph driver
	GraphDriver *GraphDriverData `json:"GraphDriver,omitempty"`

	// ID is the content-addressable ID of an image.
	//
	// This identifier is a content-addressable digest calculated from the
	// image's configuration (which includes the digests of layers used by
	// the image).
	//
	// Note that this digest differs from the `RepoDigests` below, which
	// holds digests of image manifests that reference the image.
	//
	// Example: sha256:ec3f0931a6e6b6855d76b2d7b0be30e81860baccd891b2e243280bf1cd8ad710
	ID string `json:"Id,omitempty"`

	// metadata
	Metadata *ImageInspectMetadata `json:"Metadata,omitempty"`

	// Operating System the image is built to run on.
	//
	// Example: linux
	Os string `json:"Os,omitempty"`

	// Operating System version the image is built to run on (especially
	// for Windows).
	//
	OsVersion *string `json:"OsVersion,omitempty"`

	// ID of the parent image.
	//
	// Depending on how the image was created, this field may be empty and
	// is only set for images that were built/created locally. This field
	// is empty if the image was pulled from an image registry.
	//
	Parent string `json:"Parent,omitempty"`

	// List of content-addressable digests of locally available image manifests
	// that the image is referenced from. Multiple manifests can refer to the
	// same image.
	//
	// These digests are usually only available if the image was either pulled
	// from a registry, or if the image was pushed to a registry, which is when
	// the manifest is generated and its digest calculated.
	//
	// Example: ["example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb","internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578"]
	RepoDigests []string `json:"RepoDigests"`

	// List of image names/tags in the local image cache that reference this
	// image.
	//
	// Multiple image tags can refer to the same imagem and this list may be
	// empty if no tags reference the image, in which case the image is
	// "untagged", in which case it can still be referenced by its ID.
	//
	// Example: ["example:1.0","example:latest","example:stable","internal.registry.example.com:5000/example:1.0"]
	RepoTags []string `json:"RepoTags"`

	// root f s
	RootFS *ImageInspectRootFS `json:"RootFS,omitempty"`

	// Total size of the image including all layers it is composed of.
	//
	// Example: 1239828
	Size int64 `json:"Size,omitempty"`

	// CPU architecture variant (presently ARM-only).
	//
	// Example: v7
	Variant *string `json:"Variant,omitempty"`

	// Total size of the image including all layers it is composed of.
	//
	// In versions of Bhojpur Host before v1.10, this field was calculated from
	// the image itself and all of its parent images. Bhojpur Host v1.10 and up
	// store images self-contained, and no longer use a parent-chain, making
	// this field an equivalent of the Size field.
	//
	// This field is kept for backward compatibility, but may be removed in
	// a future version of the API.
	//
	// Example: 1239828
	VirtualSize int64 `json:"VirtualSize,omitempty"`
}

// Validate validates this image inspect
func (m *ImageInspect) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGraphDriver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootFS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageInspect) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Config")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspect) validateContainerConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ContainerConfig) { // not required
		return nil
	}

	if m.ContainerConfig != nil {
		if err := m.ContainerConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContainerConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ContainerConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspect) validateGraphDriver(formats strfmt.Registry) error {
	if swag.IsZero(m.GraphDriver) { // not required
		return nil
	}

	if m.GraphDriver != nil {
		if err := m.GraphDriver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GraphDriver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GraphDriver")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspect) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspect) validateRootFS(formats strfmt.Registry) error {
	if swag.IsZero(m.RootFS) { // not required
		return nil
	}

	if m.RootFS != nil {
		if err := m.RootFS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RootFS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RootFS")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this image inspect based on the context it is used
func (m *ImageInspect) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContainerConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGraphDriver(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootFS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageInspect) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Config")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspect) contextValidateContainerConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ContainerConfig != nil {
		if err := m.ContainerConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContainerConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ContainerConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspect) contextValidateGraphDriver(ctx context.Context, formats strfmt.Registry) error {

	if m.GraphDriver != nil {
		if err := m.GraphDriver.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GraphDriver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GraphDriver")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspect) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspect) contextValidateRootFS(ctx context.Context, formats strfmt.Registry) error {

	if m.RootFS != nil {
		if err := m.RootFS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RootFS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RootFS")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageInspect) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageInspect) UnmarshalBinary(b []byte) error {
	var res ImageInspect
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ImageInspectMetadata Additional metadata of the image in the local cache. This information
// is local to the daemon, and not part of the image itself.
//
//
// swagger:model ImageInspectMetadata
type ImageInspectMetadata struct {

	// Date and time at which the image was last tagged in
	// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
	//
	// This information is only available if the image was tagged locally,
	// and omitted otherwise.
	//
	// Example: 2022-02-28T14:40:02.623929178Z
	LastTagTime *string `json:"LastTagTime,omitempty"`
}

// Validate validates this image inspect metadata
func (m *ImageInspectMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this image inspect metadata based on context it is used
func (m *ImageInspectMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImageInspectMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageInspectMetadata) UnmarshalBinary(b []byte) error {
	var res ImageInspectMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ImageInspectRootFS Information about the image's RootFS, including the layer IDs.
//
//
// swagger:model ImageInspectRootFS
type ImageInspectRootFS struct {

	// layers
	// Example: ["sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6","sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef"]
	Layers []string `json:"Layers"`

	// type
	// Example: layers
	// Required: true
	Type string `json:"Type"`
}

// Validate validates this image inspect root f s
func (m *ImageInspectRootFS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageInspectRootFS) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("RootFS"+"."+"Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this image inspect root f s based on context it is used
func (m *ImageInspectRootFS) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImageInspectRootFS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageInspectRootFS) UnmarshalBinary(b []byte) error {
	var res ImageInspectRootFS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
