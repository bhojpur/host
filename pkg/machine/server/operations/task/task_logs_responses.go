// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bhojpur/host/pkg/machine/models"
)

// TaskLogsOKCode is the HTTP code returned for type TaskLogsOK
const TaskLogsOKCode int = 200

/*TaskLogsOK logs returned as a stream in response body

swagger:response taskLogsOK
*/
type TaskLogsOK struct {

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewTaskLogsOK creates TaskLogsOK with default headers values
func NewTaskLogsOK() *TaskLogsOK {

	return &TaskLogsOK{}
}

// WithPayload adds the payload to the task logs o k response
func (o *TaskLogsOK) WithPayload(payload io.ReadCloser) *TaskLogsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the task logs o k response
func (o *TaskLogsOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TaskLogsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// TaskLogsNotFoundCode is the HTTP code returned for type TaskLogsNotFound
const TaskLogsNotFoundCode int = 404

/*TaskLogsNotFound no such task

swagger:response taskLogsNotFound
*/
type TaskLogsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewTaskLogsNotFound creates TaskLogsNotFound with default headers values
func NewTaskLogsNotFound() *TaskLogsNotFound {

	return &TaskLogsNotFound{}
}

// WithPayload adds the payload to the task logs not found response
func (o *TaskLogsNotFound) WithPayload(payload *models.ErrorResponse) *TaskLogsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the task logs not found response
func (o *TaskLogsNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TaskLogsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TaskLogsInternalServerErrorCode is the HTTP code returned for type TaskLogsInternalServerError
const TaskLogsInternalServerErrorCode int = 500

/*TaskLogsInternalServerError server error

swagger:response taskLogsInternalServerError
*/
type TaskLogsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewTaskLogsInternalServerError creates TaskLogsInternalServerError with default headers values
func NewTaskLogsInternalServerError() *TaskLogsInternalServerError {

	return &TaskLogsInternalServerError{}
}

// WithPayload adds the payload to the task logs internal server error response
func (o *TaskLogsInternalServerError) WithPayload(payload *models.ErrorResponse) *TaskLogsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the task logs internal server error response
func (o *TaskLogsInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TaskLogsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TaskLogsServiceUnavailableCode is the HTTP code returned for type TaskLogsServiceUnavailable
const TaskLogsServiceUnavailableCode int = 503

/*TaskLogsServiceUnavailable node is not part of a swarm

swagger:response taskLogsServiceUnavailable
*/
type TaskLogsServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewTaskLogsServiceUnavailable creates TaskLogsServiceUnavailable with default headers values
func NewTaskLogsServiceUnavailable() *TaskLogsServiceUnavailable {

	return &TaskLogsServiceUnavailable{}
}

// WithPayload adds the payload to the task logs service unavailable response
func (o *TaskLogsServiceUnavailable) WithPayload(payload *models.ErrorResponse) *TaskLogsServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the task logs service unavailable response
func (o *TaskLogsServiceUnavailable) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TaskLogsServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
