// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/bhojpur/host/pkg/machine/models"
)

// ImagePruneHandlerFunc turns a function with the right signature into a image prune handler
type ImagePruneHandlerFunc func(ImagePruneParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ImagePruneHandlerFunc) Handle(params ImagePruneParams) middleware.Responder {
	return fn(params)
}

// ImagePruneHandler interface for that can handle valid image prune params
type ImagePruneHandler interface {
	Handle(ImagePruneParams) middleware.Responder
}

// NewImagePrune creates a new http.Handler for the image prune operation
func NewImagePrune(ctx *middleware.Context, handler ImagePruneHandler) *ImagePrune {
	return &ImagePrune{Context: ctx, Handler: handler}
}

/* ImagePrune swagger:route POST /images/prune Image imagePrune

Delete unused images

*/
type ImagePrune struct {
	Context *middleware.Context
	Handler ImagePruneHandler
}

func (o *ImagePrune) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewImagePruneParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ImagePruneOKBody ImagePruneResponse
//
// swagger:model ImagePruneOKBody
type ImagePruneOKBody struct {

	// Images that were deleted
	ImagesDeleted []*models.ImageDeleteResponseItem `json:"ImagesDeleted"`

	// Disk space reclaimed in bytes
	SpaceReclaimed int64 `json:"SpaceReclaimed,omitempty"`
}

// Validate validates this image prune o k body
func (o *ImagePruneOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateImagesDeleted(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ImagePruneOKBody) validateImagesDeleted(formats strfmt.Registry) error {
	if swag.IsZero(o.ImagesDeleted) { // not required
		return nil
	}

	for i := 0; i < len(o.ImagesDeleted); i++ {
		if swag.IsZero(o.ImagesDeleted[i]) { // not required
			continue
		}

		if o.ImagesDeleted[i] != nil {
			if err := o.ImagesDeleted[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("imagePruneOK" + "." + "ImagesDeleted" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("imagePruneOK" + "." + "ImagesDeleted" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this image prune o k body based on the context it is used
func (o *ImagePruneOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateImagesDeleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ImagePruneOKBody) contextValidateImagesDeleted(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ImagesDeleted); i++ {

		if o.ImagesDeleted[i] != nil {
			if err := o.ImagesDeleted[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("imagePruneOK" + "." + "ImagesDeleted" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("imagePruneOK" + "." + "ImagesDeleted" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ImagePruneOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ImagePruneOKBody) UnmarshalBinary(b []byte) error {
	var res ImagePruneOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
