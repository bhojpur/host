// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewImageListParams creates a new ImageListParams object
// with the default values initialized.
func NewImageListParams() ImageListParams {

	var (
		// initialize parameters with default values

		allDefault     = bool(false)
		digestsDefault = bool(false)

		sharedSizeDefault = bool(false)
	)

	return ImageListParams{
		All: &allDefault,

		Digests: &digestsDefault,

		SharedSize: &sharedSizeDefault,
	}
}

// ImageListParams contains all the bound params for the image list operation
// typically these are obtained from a http.Request
//
// swagger:parameters ImageList
type ImageListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Show all images. Only images from a final layer (no children) are shown by default.
	  In: query
	  Default: false
	*/
	All *bool
	/*Show digest information as a `RepoDigests` field on each image.
	  In: query
	  Default: false
	*/
	Digests *bool
	/*A JSON encoded value of the filters (a `map[string][]string`) to
	process on the images list.

	Available filters:

	- `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
	- `dangling=true`
	- `label=key` or `label="key=value"` of an image label
	- `reference`=(`<image-name>[:<tag>]`)
	- `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)

	  In: query
	*/
	Filters *string
	/*Compute and show shared size as a `SharedSize` field on each image.
	  In: query
	  Default: false
	*/
	SharedSize *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewImageListParams() beforehand.
func (o *ImageListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAll, qhkAll, _ := qs.GetOK("all")
	if err := o.bindAll(qAll, qhkAll, route.Formats); err != nil {
		res = append(res, err)
	}

	qDigests, qhkDigests, _ := qs.GetOK("digests")
	if err := o.bindDigests(qDigests, qhkDigests, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilters, qhkFilters, _ := qs.GetOK("filters")
	if err := o.bindFilters(qFilters, qhkFilters, route.Formats); err != nil {
		res = append(res, err)
	}

	qSharedSize, qhkSharedSize, _ := qs.GetOK("shared-size")
	if err := o.bindSharedSize(qSharedSize, qhkSharedSize, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAll binds and validates parameter All from query.
func (o *ImageListParams) bindAll(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewImageListParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("all", "query", "bool", raw)
	}
	o.All = &value

	return nil
}

// bindDigests binds and validates parameter Digests from query.
func (o *ImageListParams) bindDigests(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewImageListParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("digests", "query", "bool", raw)
	}
	o.Digests = &value

	return nil
}

// bindFilters binds and validates parameter Filters from query.
func (o *ImageListParams) bindFilters(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Filters = &raw

	return nil
}

// bindSharedSize binds and validates parameter SharedSize from query.
func (o *ImageListParams) bindSharedSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewImageListParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("shared-size", "query", "bool", raw)
	}
	o.SharedSize = &value

	return nil
}
