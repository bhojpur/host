// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewImageGetAllParams creates a new ImageGetAllParams object
//
// There are no default values defined in the spec.
func NewImageGetAllParams() ImageGetAllParams {

	return ImageGetAllParams{}
}

// ImageGetAllParams contains all the bound params for the image get all operation
// typically these are obtained from a http.Request
//
// swagger:parameters ImageGetAll
type ImageGetAllParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Image names to filter by
	  In: query
	*/
	Names []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewImageGetAllParams() beforehand.
func (o *ImageGetAllParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qNames, qhkNames, _ := qs.GetOK("names")
	if err := o.bindNames(qNames, qhkNames, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindNames binds and validates array parameter Names from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *ImageGetAllParams) bindNames(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvNames string
	if len(rawData) > 0 {
		qvNames = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	namesIC := swag.SplitByFormat(qvNames, "")
	if len(namesIC) == 0 {
		return nil
	}

	var namesIR []string
	for _, namesIV := range namesIC {
		namesI := namesIV

		namesIR = append(namesIR, namesI)
	}

	o.Names = namesIR

	return nil
}
