// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewContainerWaitParams creates a new ContainerWaitParams object
// with the default values initialized.
func NewContainerWaitParams() ContainerWaitParams {

	var (
		// initialize parameters with default values

		conditionDefault = string("not-running")
	)

	return ContainerWaitParams{
		Condition: &conditionDefault,
	}
}

// ContainerWaitParams contains all the bound params for the container wait operation
// typically these are obtained from a http.Request
//
// swagger:parameters ContainerWait
type ContainerWaitParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Wait until a container state reaches the given condition.

	Defaults to `not-running` if omitted or empty.

	  In: query
	  Default: "not-running"
	*/
	Condition *string
	/*ID or name of the container
	  Required: true
	  In: path
	*/
	ID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewContainerWaitParams() beforehand.
func (o *ContainerWaitParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCondition, qhkCondition, _ := qs.GetOK("condition")
	if err := o.bindCondition(qCondition, qhkCondition, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCondition binds and validates parameter Condition from query.
func (o *ContainerWaitParams) bindCondition(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewContainerWaitParams()
		return nil
	}
	o.Condition = &raw

	if err := o.validateCondition(formats); err != nil {
		return err
	}

	return nil
}

// validateCondition carries on validations for parameter Condition
func (o *ContainerWaitParams) validateCondition(formats strfmt.Registry) error {

	if err := validate.EnumCase("condition", "query", *o.Condition, []interface{}{"not-running", "next-exit", "removed"}, true); err != nil {
		return err
	}

	return nil
}

// bindID binds and validates parameter ID from path.
func (o *ContainerWaitParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ID = raw

	return nil
}
