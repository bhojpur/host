// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContainerChangesHandlerFunc turns a function with the right signature into a container changes handler
type ContainerChangesHandlerFunc func(ContainerChangesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContainerChangesHandlerFunc) Handle(params ContainerChangesParams) middleware.Responder {
	return fn(params)
}

// ContainerChangesHandler interface for that can handle valid container changes params
type ContainerChangesHandler interface {
	Handle(ContainerChangesParams) middleware.Responder
}

// NewContainerChanges creates a new http.Handler for the container changes operation
func NewContainerChanges(ctx *middleware.Context, handler ContainerChangesHandler) *ContainerChanges {
	return &ContainerChanges{Context: ctx, Handler: handler}
}

/* ContainerChanges swagger:route GET /containers/{id}/changes Container containerChanges

Get changes on a containerâ€™s filesystem

Returns which files in a container's filesystem have been added, deleted,
or modified. The `Kind` of modification can be one of:

- `0`: Modified
- `1`: Added
- `2`: Deleted


*/
type ContainerChanges struct {
	Context *middleware.Context
	Handler ContainerChangesHandler
}

func (o *ContainerChanges) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewContainerChangesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ContainerChangeResponseItem ContainerChangeResponseItem
//
// change item in response to ContainerChanges operation
//
// swagger:model ContainerChangeResponseItem
type ContainerChangeResponseItem struct {

	// Kind of change
	// Required: true
	// Enum: [0 1 2]
	Kind uint8 `json:"Kind"`

	// Path to file that has changed
	// Required: true
	Path string `json:"Path"`
}

// Validate validates this container change response item
func (o *ContainerChangeResponseItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var containerChangeResponseItemTypeKindPropEnum []interface{}

func init() {
	var res []uint8
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		containerChangeResponseItemTypeKindPropEnum = append(containerChangeResponseItemTypeKindPropEnum, v)
	}
}

// prop value enum
func (o *ContainerChangeResponseItem) validateKindEnum(path, location string, value uint8) error {
	if err := validate.EnumCase(path, location, value, containerChangeResponseItemTypeKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ContainerChangeResponseItem) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("Kind", "body", uint8(o.Kind)); err != nil {
		return err
	}

	// value enum
	if err := o.validateKindEnum("Kind", "body", o.Kind); err != nil {
		return err
	}

	return nil
}

func (o *ContainerChangeResponseItem) validatePath(formats strfmt.Registry) error {

	if err := validate.RequiredString("Path", "body", o.Path); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this container change response item based on context it is used
func (o *ContainerChangeResponseItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ContainerChangeResponseItem) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContainerChangeResponseItem) UnmarshalBinary(b []byte) error {
	var res ContainerChangeResponseItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
