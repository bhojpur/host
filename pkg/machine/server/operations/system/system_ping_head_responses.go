// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/bhojpur/host/pkg/machine/models"
)

// SystemPingHeadOKCode is the HTTP code returned for type SystemPingHeadOK
const SystemPingHeadOKCode int = 200

/*SystemPingHeadOK no error

swagger:response systemPingHeadOK
*/
type SystemPingHeadOK struct {
	/*Max API Version the server supports

	 */
	APIVersion string `json:"API-Version"`
	/*If the server is running with experimental mode enabled

	 */
	BhojpurExperimental bool `json:"Bhojpur-Experimental"`
	/*Default version of Bhojpur Host image builder

	 */
	BuilderVersion string `json:"Builder-Version"`
	/*

	  Default: "no-cache, no-store, must-revalidate"
	*/
	CacheControl string `json:"Cache-Control"`
	/*

	  Default: "no-cache"
	*/
	Pragma string `json:"Pragma"`
	/*Contains information about Swarm status of the daemon,
	and if the daemon is acting as a manager or worker node.


	  Default: "inactive"
	*/
	Swarm string `json:"Swarm"`

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSystemPingHeadOK creates SystemPingHeadOK with default headers values
func NewSystemPingHeadOK() *SystemPingHeadOK {

	var (
		// initialize headers with default values

		cacheControlDefault = string("no-cache, no-store, must-revalidate")
		pragmaDefault       = string("no-cache")
		swarmDefault        = string("inactive")
	)

	return &SystemPingHeadOK{

		CacheControl: cacheControlDefault,

		Pragma: pragmaDefault,

		Swarm: swarmDefault,
	}
}

// WithAPIVersion adds the apiVersion to the system ping head o k response
func (o *SystemPingHeadOK) WithAPIVersion(aPIVersion string) *SystemPingHeadOK {
	o.APIVersion = aPIVersion
	return o
}

// SetAPIVersion sets the apiVersion to the system ping head o k response
func (o *SystemPingHeadOK) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithBhojpurExperimental adds the bhojpurExperimental to the system ping head o k response
func (o *SystemPingHeadOK) WithBhojpurExperimental(bhojpurExperimental bool) *SystemPingHeadOK {
	o.BhojpurExperimental = bhojpurExperimental
	return o
}

// SetBhojpurExperimental sets the bhojpurExperimental to the system ping head o k response
func (o *SystemPingHeadOK) SetBhojpurExperimental(bhojpurExperimental bool) {
	o.BhojpurExperimental = bhojpurExperimental
}

// WithBuilderVersion adds the builderVersion to the system ping head o k response
func (o *SystemPingHeadOK) WithBuilderVersion(builderVersion string) *SystemPingHeadOK {
	o.BuilderVersion = builderVersion
	return o
}

// SetBuilderVersion sets the builderVersion to the system ping head o k response
func (o *SystemPingHeadOK) SetBuilderVersion(builderVersion string) {
	o.BuilderVersion = builderVersion
}

// WithCacheControl adds the cacheControl to the system ping head o k response
func (o *SystemPingHeadOK) WithCacheControl(cacheControl string) *SystemPingHeadOK {
	o.CacheControl = cacheControl
	return o
}

// SetCacheControl sets the cacheControl to the system ping head o k response
func (o *SystemPingHeadOK) SetCacheControl(cacheControl string) {
	o.CacheControl = cacheControl
}

// WithPragma adds the pragma to the system ping head o k response
func (o *SystemPingHeadOK) WithPragma(pragma string) *SystemPingHeadOK {
	o.Pragma = pragma
	return o
}

// SetPragma sets the pragma to the system ping head o k response
func (o *SystemPingHeadOK) SetPragma(pragma string) {
	o.Pragma = pragma
}

// WithSwarm adds the swarm to the system ping head o k response
func (o *SystemPingHeadOK) WithSwarm(swarm string) *SystemPingHeadOK {
	o.Swarm = swarm
	return o
}

// SetSwarm sets the swarm to the system ping head o k response
func (o *SystemPingHeadOK) SetSwarm(swarm string) {
	o.Swarm = swarm
}

// WithPayload adds the payload to the system ping head o k response
func (o *SystemPingHeadOK) WithPayload(payload string) *SystemPingHeadOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the system ping head o k response
func (o *SystemPingHeadOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SystemPingHeadOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header API-Version

	aPIVersion := o.APIVersion
	if aPIVersion != "" {
		rw.Header().Set("API-Version", aPIVersion)
	}

	// response header Bhojpur-Experimental

	bhojpurExperimental := swag.FormatBool(o.BhojpurExperimental)
	if bhojpurExperimental != "" {
		rw.Header().Set("Bhojpur-Experimental", bhojpurExperimental)
	}

	// response header Builder-Version

	builderVersion := o.BuilderVersion
	if builderVersion != "" {
		rw.Header().Set("Builder-Version", builderVersion)
	}

	// response header Cache-Control

	cacheControl := o.CacheControl
	if cacheControl != "" {
		rw.Header().Set("Cache-Control", cacheControl)
	}

	// response header Pragma

	pragma := o.Pragma
	if pragma != "" {
		rw.Header().Set("Pragma", pragma)
	}

	// response header Swarm

	swarm := o.Swarm
	if swarm != "" {
		rw.Header().Set("Swarm", swarm)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SystemPingHeadInternalServerErrorCode is the HTTP code returned for type SystemPingHeadInternalServerError
const SystemPingHeadInternalServerErrorCode int = 500

/*SystemPingHeadInternalServerError server error

swagger:response systemPingHeadInternalServerError
*/
type SystemPingHeadInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSystemPingHeadInternalServerError creates SystemPingHeadInternalServerError with default headers values
func NewSystemPingHeadInternalServerError() *SystemPingHeadInternalServerError {

	return &SystemPingHeadInternalServerError{}
}

// WithPayload adds the payload to the system ping head internal server error response
func (o *SystemPingHeadInternalServerError) WithPayload(payload *models.ErrorResponse) *SystemPingHeadInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the system ping head internal server error response
func (o *SystemPingHeadInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SystemPingHeadInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
