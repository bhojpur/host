// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemAuthHandlerFunc turns a function with the right signature into a system auth handler
type SystemAuthHandlerFunc func(SystemAuthParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SystemAuthHandlerFunc) Handle(params SystemAuthParams) middleware.Responder {
	return fn(params)
}

// SystemAuthHandler interface for that can handle valid system auth params
type SystemAuthHandler interface {
	Handle(SystemAuthParams) middleware.Responder
}

// NewSystemAuth creates a new http.Handler for the system auth operation
func NewSystemAuth(ctx *middleware.Context, handler SystemAuthHandler) *SystemAuth {
	return &SystemAuth{Context: ctx, Handler: handler}
}

/* SystemAuth swagger:route POST /auth System systemAuth

Check auth configuration

Validate credentials for a registry and, if available, get an identity
token for accessing the registry without password.


*/
type SystemAuth struct {
	Context *middleware.Context
	Handler SystemAuthHandler
}

func (o *SystemAuth) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSystemAuthParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SystemAuthOKBody SystemAuthResponse
//
// swagger:model SystemAuthOKBody
type SystemAuthOKBody struct {

	// An opaque token used to authenticate a user after a successful login
	IdentityToken string `json:"IdentityToken,omitempty"`

	// The status of the authentication
	// Required: true
	Status string `json:"Status"`
}

// Validate validates this system auth o k body
func (o *SystemAuthOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SystemAuthOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("systemAuthOK"+"."+"Status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this system auth o k body based on context it is used
func (o *SystemAuthOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SystemAuthOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SystemAuthOKBody) UnmarshalBinary(b []byte) error {
	var res SystemAuthOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
