// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bhojpur/host/pkg/machine/models"
)

// NodeInspectOKCode is the HTTP code returned for type NodeInspectOK
const NodeInspectOKCode int = 200

/*NodeInspectOK no error

swagger:response nodeInspectOK
*/
type NodeInspectOK struct {

	/*
	  In: Body
	*/
	Payload *models.Node `json:"body,omitempty"`
}

// NewNodeInspectOK creates NodeInspectOK with default headers values
func NewNodeInspectOK() *NodeInspectOK {

	return &NodeInspectOK{}
}

// WithPayload adds the payload to the node inspect o k response
func (o *NodeInspectOK) WithPayload(payload *models.Node) *NodeInspectOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the node inspect o k response
func (o *NodeInspectOK) SetPayload(payload *models.Node) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodeInspectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NodeInspectNotFoundCode is the HTTP code returned for type NodeInspectNotFound
const NodeInspectNotFoundCode int = 404

/*NodeInspectNotFound no such node

swagger:response nodeInspectNotFound
*/
type NodeInspectNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewNodeInspectNotFound creates NodeInspectNotFound with default headers values
func NewNodeInspectNotFound() *NodeInspectNotFound {

	return &NodeInspectNotFound{}
}

// WithPayload adds the payload to the node inspect not found response
func (o *NodeInspectNotFound) WithPayload(payload *models.ErrorResponse) *NodeInspectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the node inspect not found response
func (o *NodeInspectNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodeInspectNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NodeInspectInternalServerErrorCode is the HTTP code returned for type NodeInspectInternalServerError
const NodeInspectInternalServerErrorCode int = 500

/*NodeInspectInternalServerError server error

swagger:response nodeInspectInternalServerError
*/
type NodeInspectInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewNodeInspectInternalServerError creates NodeInspectInternalServerError with default headers values
func NewNodeInspectInternalServerError() *NodeInspectInternalServerError {

	return &NodeInspectInternalServerError{}
}

// WithPayload adds the payload to the node inspect internal server error response
func (o *NodeInspectInternalServerError) WithPayload(payload *models.ErrorResponse) *NodeInspectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the node inspect internal server error response
func (o *NodeInspectInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodeInspectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NodeInspectServiceUnavailableCode is the HTTP code returned for type NodeInspectServiceUnavailable
const NodeInspectServiceUnavailableCode int = 503

/*NodeInspectServiceUnavailable node is not part of a swarm

swagger:response nodeInspectServiceUnavailable
*/
type NodeInspectServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewNodeInspectServiceUnavailable creates NodeInspectServiceUnavailable with default headers values
func NewNodeInspectServiceUnavailable() *NodeInspectServiceUnavailable {

	return &NodeInspectServiceUnavailable{}
}

// WithPayload adds the payload to the node inspect service unavailable response
func (o *NodeInspectServiceUnavailable) WithPayload(payload *models.ErrorResponse) *NodeInspectServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the node inspect service unavailable response
func (o *NodeInspectServiceUnavailable) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodeInspectServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
